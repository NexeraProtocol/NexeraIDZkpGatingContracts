{
  "address": "0x2264C14067928101633801f4c9502CF9f2c2C72C",
  "abi": [
    {
      "inputs": [],
      "name": "InvalidInitialization",
      "type": "error"
    },
    {
      "inputs": [],
      "name": "NotInitializing",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "owner",
          "type": "address"
        }
      ],
      "name": "OwnableInvalidOwner",
      "type": "error"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "account",
          "type": "address"
        }
      ],
      "name": "OwnableUnauthorizedAccount",
      "type": "error"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint64",
          "name": "version",
          "type": "uint64"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferStarted",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "acceptOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getGISTRootExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getProofExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getRevocationStateExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getStateAddress",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedCircuitIds",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "ids",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stateContractAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "inputIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        }
      ],
      "name": "parsePubSignals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "merklized",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerState",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circuitQueryHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "challenge",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gistRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "isRevocationChecked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerClaimNonRevState",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CredentialAtomicQueryV2ValidatorBase.PubSignals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "pendingOwner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setGISTRootExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setProofExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setRevocationStateExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stateContractAddr",
          "type": "address"
        }
      ],
      "name": "setStateAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "bytes4",
          "name": "interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "internalType": "bool",
          "name": "",
          "type": "bool"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        },
        {
          "internalType": "address",
          "name": "sender",
          "type": "address"
        }
      ],
      "name": "verify",
      "outputs": [
        {
          "components": [
            {
              "internalType": "string",
              "name": "key",
              "type": "string"
            },
            {
              "internalType": "uint256",
              "name": "inputIndex",
              "type": "uint256"
            }
          ],
          "internalType": "struct ICircuitValidator.KeyToInputIndex[]",
          "name": "",
          "type": "tuple[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "version",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    }
  ],
  "transactionHash": "0x2d823e88cba93a0407cc0e167a2bfcd6c87828dd98f9b990ef4a5df57a3645ab",
  "receipt": {
    "to": null,
    "from": "0x0BAd9DaD98143b2E946e8A40E4f27537be2f55E2",
    "contractAddress": "0x2264C14067928101633801f4c9502CF9f2c2C72C",
    "transactionIndex": 25,
    "gasUsed": "2115086",
    "logsBloom": "0x
    "blockHash": "0x9cd6a76179c75a1fcecba66e70f81f19eaf326c5efbe093118fbe7aa9d7d4ede",
    "transactionHash": "0x2d823e88cba93a0407cc0e167a2bfcd6c87828dd98f9b990ef4a5df57a3645ab",
    "logs": [],
    "blockNumber": 5730662,
    "cumulativeGasUsed": "3594609",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "a0a5c08d8a573c8b013e1a01f6f1b520",
  "metadata": "{\"compiler\":{\"version\":\"0.8.20+commit.a1b79de6\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[],\"name\":\"InvalidInitialization\",\"type\":\"error\"},{\"inputs\":[],\"name\":\"NotInitializing\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"owner\",\"type\":\"address\"}],\"name\":\"OwnableInvalidOwner\",\"type\":\"error\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"account\",\"type\":\"address\"}],\"name\":\"OwnableUnauthorizedAccount\",\"type\":\"error\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint64\",\"name\":\"version\",\"type\":\"uint64\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferStarted\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"acceptOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getGISTRootExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getProofExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getRevocationStateExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getStateAddress\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedCircuitIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"ids\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stateContractAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"inputIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"}],\"name\":\"parsePubSignals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merklized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitQueryHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challenge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gistRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isRevocationChecked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerClaimNonRevState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CredentialAtomicQueryV2ValidatorBase.PubSignals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"pendingOwner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setGISTRootExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setProofExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setRevocationStateExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stateContractAddr\",\"type\":\"address\"}],\"name\":\"setStateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"bytes4\",\"name\":\"interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"internalType\":\"bool\",\"name\":\"\",\"type\":\"bool\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"},{\"internalType\":\"address\",\"name\":\"sender\",\"type\":\"address\"}],\"name\":\"verify\",\"outputs\":[{\"components\":[{\"internalType\":\"string\",\"name\":\"key\",\"type\":\"string\"},{\"internalType\":\"uint256\",\"name\":\"inputIndex\",\"type\":\"uint256\"}],\"internalType\":\"struct ICircuitValidator.KeyToInputIndex[]\",\"name\":\"\",\"type\":\"tuple[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"version\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"pure\",\"type\":\"function\"}],\"devdoc\":{\"errors\":{\"InvalidInitialization()\":[{\"details\":\"The contract is already initialized.\"}],\"NotInitializing()\":[{\"details\":\"The contract is not initializing.\"}],\"OwnableInvalidOwner(address)\":[{\"details\":\"The owner is not a valid owner account. (eg. `address(0)`)\"}],\"OwnableUnauthorizedAccount(address)\":[{\"details\":\"The caller account is not authorized to perform an operation.\"}]},\"events\":{\"Initialized(uint64)\":{\"details\":\"Triggered when the contract has been initialized or reinitialized.\"}},\"kind\":\"dev\",\"methods\":{\"acceptOwnership()\":{\"details\":\"The new owner accepts the ownership transfer.\"},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingOwner()\":{\"details\":\"Returns the address of the pending owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"supportsInterface(bytes4)\":{\"details\":\"See {IERC165-supportsInterface}.\"},\"transferOwnership(address)\":{\"details\":\"Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner.\"}},\"stateVariables\":{\"VERSION\":{\"details\":\"Version of contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/validators/CredentialAtomicQuerySigV2Validator.sol\":\"CredentialAtomicQuerySigV2Validator\"},\"evmVersion\":\"paris\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@iden3/contracts/interfaces/ICircuitValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\ninterface ICircuitValidator {\\n    struct KeyToInputIndex {\\n        string key;\\n        uint256 inputIndex;\\n    }\\n\\n    function version() external view returns (string memory);\\n\\n    function verify(\\n        uint256[] memory inputs,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        bytes calldata data,\\n        address sender\\n    ) external view returns (ICircuitValidator.KeyToInputIndex[] memory);\\n\\n    function getSupportedCircuitIds() external view returns (string[] memory ids);\\n\\n    function inputIndexOf(string memory name) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xbe98b7af19064e81fda682c7ac82dbbd931a7893ccf3a2aba47de79a00bb7d3e\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/interfaces/IState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\n// TODO changing this value don't forget to change GistProof.siblings array size\\n// figure out how to reuse the constant in the array size\\n// without compiler error\\nuint256 constant MAX_SMT_DEPTH = 64;\\n\\ninterface IState {\\n    /**\\n     * @dev Struct for public interfaces to represent a state information.\\n     * @param id An identity.\\n     * @param state A state.\\n     * @param replacedByState A state, which replaced this state for the identity.\\n     * @param createdAtTimestamp A time when the state was created.\\n     * @param replacedAtTimestamp A time when the state was replaced by the next identity state.\\n     * @param createdAtBlock A block number when the state was created.\\n     * @param replacedAtBlock A block number when the state was replaced by the next identity state.\\n     */\\n    struct StateInfo {\\n        uint256 id;\\n        uint256 state;\\n        uint256 replacedByState;\\n        uint256 createdAtTimestamp;\\n        uint256 replacedAtTimestamp;\\n        uint256 createdAtBlock;\\n        uint256 replacedAtBlock;\\n    }\\n\\n    /**\\n     * @dev Struct for public interfaces to represent GIST root information.\\n     * @param root This GIST root.\\n     * @param replacedByRoot A root, which replaced this root.\\n     * @param createdAtTimestamp A time, when the root was saved to blockchain.\\n     * @param replacedAtTimestamp A time, when the root was replaced by the next root in blockchain.\\n     * @param createdAtBlock A number of block, when the root was saved to blockchain.\\n     * @param replacedAtBlock A number of block, when the root was replaced by the next root in blockchain.\\n     */\\n    struct GistRootInfo {\\n        uint256 root;\\n        uint256 replacedByRoot;\\n        uint256 createdAtTimestamp;\\n        uint256 replacedAtTimestamp;\\n        uint256 createdAtBlock;\\n        uint256 replacedAtBlock;\\n    }\\n\\n    /**\\n     * @dev Struct for public interfaces to represent GIST proof information.\\n     * @param root This GIST root.\\n     * @param existence A flag, which shows if the leaf index exists in the GIST.\\n     * @param siblings An array of GIST sibling node hashes.\\n     * @param index An index of the leaf in the GIST.\\n     * @param value A value of the leaf in the GIST.\\n     * @param auxExistence A flag, which shows if the auxiliary leaf exists in the GIST.\\n     * @param auxIndex An index of the auxiliary leaf in the GIST.\\n     * @param auxValue An value of the auxiliary leaf in the GIST.\\n     */\\n    struct GistProof {\\n        uint256 root;\\n        bool existence;\\n        uint256[64] siblings; // TODO figure out the way how to use the MAX_SMT_DEPTH constant\\n        uint256 index;\\n        uint256 value;\\n        bool auxExistence;\\n        uint256 auxIndex;\\n        uint256 auxValue;\\n    }\\n\\n    /**\\n     * @dev Retrieve last state information of specific id.\\n     * @param id An identity.\\n     * @return The state info.\\n     */\\n    function getStateInfoById(uint256 id) external view returns (StateInfo memory);\\n\\n    /**\\n     * @dev Retrieve state information by id and state.\\n     * @param id An identity.\\n     * @param state A state.\\n     * @return The state info.\\n     */\\n    function getStateInfoByIdAndState(\\n        uint256 id,\\n        uint256 state\\n    ) external view returns (StateInfo memory);\\n\\n    /**\\n     * @dev Retrieve the specific GIST root information.\\n     * @param root GIST root.\\n     * @return The GIST root info.\\n     */\\n    function getGISTRootInfo(uint256 root) external view returns (GistRootInfo memory);\\n\\n    /**\\n     * @dev Get defaultIdType\\n     * @return defaultIdType\\n     */\\n    function getDefaultIdType() external view returns (bytes2);\\n\\n    /**\\n     * @dev Performs state transition\\n     * @param id Identifier of the identity\\n     * @param oldState Previous state of the identity\\n     * @param newState New state of the identity\\n     * @param isOldStateGenesis Flag if previous identity state is genesis\\n     * @param a Proof.A\\n     * @param b Proof.B\\n     * @param c Proof.C\\n     */\\n    function transitState(\\n        uint256 id,\\n        uint256 oldState,\\n        uint256 newState,\\n        bool isOldStateGenesis,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c\\n    ) external;\\n\\n    /**\\n     * @dev Performs state transition\\n     * @param id Identity\\n     * @param oldState Previous identity state\\n     * @param newState New identity state\\n     * @param isOldStateGenesis Is the previous state genesis?\\n     * @param methodId State transition method id\\n     * @param methodParams State transition method-specific params\\n     */\\n    function transitStateGeneric(\\n        uint256 id,\\n        uint256 oldState,\\n        uint256 newState,\\n        bool isOldStateGenesis,\\n        uint256 methodId,\\n        bytes calldata methodParams\\n    ) external;\\n\\n    /**\\n     * @dev Check if identity exists.\\n     * @param id Identity\\n     * @return True if the identity exists\\n     */\\n    function idExists(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Check if state exists.\\n     * @param id Identity\\n     * @param state State\\n     * @return True if the state exists\\n     */\\n    function stateExists(uint256 id, uint256 state) external view returns (bool);\\n}\\n\",\"keccak256\":\"0xfb4faf4b3814c6a61584cec41acc2a4814c51b9873b75235c2a8d0d2146f7322\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\ninterface IVerifier {\\n    function verify(\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        uint256[] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0xc5cce9e03098ea13153eaa943bf82cde99916b202d671ad9182a9791a368ccd9\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/GenesisUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\nimport {PrimitiveTypeUtils} from \\\"./PrimitiveTypeUtils.sol\\\";\\n\\nlibrary GenesisUtils {\\n    /**\\n     *   @dev sum\\n     */\\n    function sum(bytes memory array) internal pure returns (uint16 s) {\\n        require(array.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        for (uint256 i = 0; i < array.length; ++i) {\\n            s += uint16(uint8(array[i]));\\n        }\\n    }\\n\\n    /**\\n     * @dev isGenesisState\\n     */\\n    function isGenesisState(uint256 id, uint256 idState) internal pure returns (bool) {\\n        bytes2 idType = bytes2(\\n            PrimitiveTypeUtils.uint256ToBytes(PrimitiveTypeUtils.reverseUint256(id))\\n        );\\n        uint256 computedId = calcIdFromGenesisState(idType, idState);\\n        return id == computedId;\\n    }\\n\\n    /**\\n     * @dev calcIdFromGenesisState\\n     */\\n    function calcIdFromGenesisState(\\n        bytes2 idType,\\n        uint256 idState\\n    ) internal pure returns (uint256) {\\n        bytes memory userStateB1 = PrimitiveTypeUtils.uint256ToBytes(\\n            PrimitiveTypeUtils.reverseUint256(idState)\\n        );\\n\\n        bytes memory cutState = PrimitiveTypeUtils.slice(userStateB1, userStateB1.length - 27, 27);\\n\\n        bytes memory beforeChecksum = PrimitiveTypeUtils.concat(abi.encodePacked(idType), cutState);\\n        require(beforeChecksum.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        uint16 checksum = PrimitiveTypeUtils.reverseUint16(sum(beforeChecksum));\\n\\n        bytes memory checkSumBytes = abi.encodePacked(checksum);\\n\\n        bytes memory idBytes = PrimitiveTypeUtils.concat(beforeChecksum, checkSumBytes);\\n        require(idBytes.length == 31, \\\"idBytes requires 31 length array\\\");\\n\\n        return PrimitiveTypeUtils.reverseUint256(PrimitiveTypeUtils.padRightToUint256(idBytes));\\n    }\\n\\n    /**\\n     * @dev calcIdFromEthAddress\\n     */\\n    function calcIdFromEthAddress(bytes2 idType, address caller) internal pure returns (uint256) {\\n        uint256 addr = PrimitiveTypeUtils.addressToUint256(caller);\\n\\n        return calcIdFromGenesisState(idType, PrimitiveTypeUtils.reverseUint256(addr));\\n    }\\n}\\n\",\"keccak256\":\"0xeb76c5837450a2df7760f2ce1efdf8a803b43ae8c678bf32365f9f2a70dde73d\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\nlibrary PoseidonUnit1L {\\n    function poseidon(uint256[1] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit2L {\\n    function poseidon(uint256[2] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit3L {\\n    function poseidon(uint256[3] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit4L {\\n    function poseidon(uint256[4] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit5L {\\n    function poseidon(uint256[5] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit6L {\\n    function poseidon(uint256[6] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary SpongePoseidon {\\n    uint32 internal constant BATCH_SIZE = 6;\\n\\n    function hash(uint256[] calldata values) public pure returns (uint256) {\\n        uint256[BATCH_SIZE] memory frame = [uint256(0), 0, 0, 0, 0, 0];\\n        bool dirty = false;\\n        uint256 fullHash = 0;\\n        uint32 k = 0;\\n        for (uint32 i = 0; i < values.length; i++) {\\n            dirty = true;\\n            frame[k] = values[i];\\n            if (k == BATCH_SIZE - 1) {\\n                fullHash = PoseidonUnit6L.poseidon(frame);\\n                dirty = false;\\n                frame = [uint256(0), 0, 0, 0, 0, 0];\\n                frame[0] = fullHash;\\n                k = 1;\\n            } else {\\n                k++;\\n            }\\n        }\\n        if (dirty) {\\n            // we haven't hashed something in the main sponge loop and need to do hash here\\n            fullHash = PoseidonUnit6L.poseidon(frame);\\n        }\\n        return fullHash;\\n    }\\n}\\n\\nlibrary PoseidonFacade {\\n    function poseidon1(uint256[1] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit1L.poseidon(el);\\n    }\\n\\n    function poseidon2(uint256[2] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit2L.poseidon(el);\\n    }\\n\\n    function poseidon3(uint256[3] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit3L.poseidon(el);\\n    }\\n\\n    function poseidon4(uint256[4] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit4L.poseidon(el);\\n    }\\n\\n    function poseidon5(uint256[5] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit5L.poseidon(el);\\n    }\\n\\n    function poseidon6(uint256[6] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit6L.poseidon(el);\\n    }\\n\\n    function poseidonSponge(uint256[] calldata el) public pure returns (uint256) {\\n        return SpongePoseidon.hash(el);\\n    }\\n}\\n\",\"keccak256\":\"0x0fb0a6fdd0f8a240288c43abb3f4eff6661d863afad6c75998d29b682ae4e644\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/PrimitiveTypeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nlibrary PrimitiveTypeUtils {\\n    /**\\n     * @dev uint256ToBytes\\n     */\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    /**\\n     * @dev reverse uint256\\n     */\\n    function reverseUint256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @dev reverse uint16\\n     */\\n    function reverseUint16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    /**\\n     * @dev reverse uint32\\n     */\\n    function reverseUint32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /**\\n     * @dev compareStrings\\n     */\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        if (bytes(a).length != bytes(b).length) {\\n            return false;\\n        }\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    /**\\n     * @dev padRightToUint256 shift left 12 bytes\\n     * @param b, bytes array with max length 32, other bytes are cut. e.g. 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\n     * @return value e.g 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000\\n     */\\n    function padRightToUint256(bytes memory b) internal pure returns (uint256 value) {\\n        return uint256(bytes32(b));\\n    }\\n\\n    /**\\n     * @dev bytesToAddress\\n     */\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    /**\\n     * @dev concat\\n     */\\n    function concat(\\n        bytes memory preBytes,\\n        bytes memory postBytes\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.concat(preBytes, postBytes);\\n    }\\n\\n    /**\\n     * @dev slice\\n     */\\n    function slice(\\n        bytes memory bys,\\n        uint256 start,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.slice(bys, start, length);\\n    }\\n\\n    /**\\n     * @dev addressToUint256 converts address to uint256 which lower 20 bytes\\n     * is an address in Big Endian\\n     * @param _addr is ethereum address: eg.0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\n     * which as 0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266 converted to uint160\\n     * @return uint256 representation of address 1390849295786071768276380950238675083608645509734\\n     */\\n    function addressToUint256(address _addr) internal pure returns (uint256) {\\n        return uint256(uint160(_addr));\\n    }\\n\\n    /**\\n     * @dev uint256ToAddress converts uint256 which lower 20 bytes\\n     * is an address in Big Endian to address\\n     * @param input uint256 e.g. 1390849295786071768276380950238675083608645509734\\n     * which as 0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266 converted to address\\n     * @return address representation of uint256 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\n     */\\n    function uint256ToAddress(uint256 input) internal pure returns (address) {\\n        require(\\n            input == uint256(uint160(input)),\\n            \\\"given input is not a representation of address, 12 most significant bytes should be zero\\\"\\n        );\\n        return address(uint160(input));\\n    }\\n\\n    /**\\n     * @dev addressToChallenge converts address to uint256 which lower 20 bytes\\n     * are representation of address in LittleEndian\\n     * @param _addr is ethereum address: eg.0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\n     * addressToBytes: 0x000000000000000000000000f39fd6e51aad88f6f4ce6ab8827279cfffb92266\\n     * padRightToUint256: 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000,\\n     * reverseUint256 result: 0x0000000000000000000000006622b9ffcf797282b86acef4f688ad1ae5d69ff3\\n     * @return uint256: 583091486781463398742321306787801699791102451699\\n     */\\n    function addressToUint256LE(address _addr) internal pure returns (uint256) {\\n        return reverseUint256(padRightToUint256(addressToBytes(_addr)));\\n    }\\n\\n    /**\\n     * @dev uint256LEtoAddress - converts uint256 which 20 lower bytes\\n     *      are representation of address in LE to address\\n     * @param input is uint256 which is created from bytes in LittleEndian:\\n     * eg. 583091486781463398742321306787801699791102451699\\n     *  or 0x0000000000000000000000006622b9ffcf797282b86acef4f688ad1ae5d69ff3\\n     * reverseUint256 result: 110194434039389003190498847789203126033799499726478230611233094447786700570624\\n     * uint256ToBytes result: 0xf39fd6e51aad88f6f4ce6ab8827279cfffb92266000000000000000000000000\\n     * @return address - 0xf39Fd6e51aad88F6F4ce6aB8827279cffFb92266\\n     */\\n    function uint256LEToAddress(uint256 input) internal pure returns (address) {\\n        require(\\n            input == uint256(uint160(input)),\\n            \\\"given uint256 is not a representation of an address, 12 most significant bytes should be zero\\\"\\n        );\\n        return bytesToAddress(uint256ToBytes(reverseUint256(input)));\\n    }\\n\\n    function addressToBytes(address a) internal pure returns (bytes memory) {\\n        return abi.encodePacked(a);\\n    }\\n}\\n\",\"keccak256\":\"0xd8caabc62fe8d38bb06efa80af6a30560aaee7a88f226dd101df5d1d163d841e\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/validators/CredentialAtomicQueryValidatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.20;\\n\\nimport {Ownable2StepUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\\\";\\nimport {ERC165} from \\\"@openzeppelin/contracts/utils/introspection/ERC165.sol\\\";\\nimport {GenesisUtils} from \\\"../lib/GenesisUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"../interfaces/ICircuitValidator.sol\\\";\\nimport {IVerifier} from \\\"../interfaces/IVerifier.sol\\\";\\nimport {IState} from \\\"../interfaces/IState.sol\\\";\\nimport {PoseidonFacade} from \\\"../lib/Poseidon.sol\\\";\\nimport {PrimitiveTypeUtils} from \\\"../lib/PrimitiveTypeUtils.sol\\\";\\n\\nabstract contract CredentialAtomicQueryValidatorBase is\\n    Ownable2StepUpgradeable,\\n    ICircuitValidator,\\n    ERC165\\n{\\n    /// @dev Main storage structure for the contract\\n    struct CredentialAtomicQueryValidatorBaseStorage {\\n        mapping(string => IVerifier) _circuitIdToVerifier;\\n        string[] _supportedCircuitIds;\\n        IState state;\\n        uint256 revocationStateExpirationTimeout;\\n        uint256 proofExpirationTimeout;\\n        uint256 gistRootExpirationTimeout;\\n        mapping(string => uint256) _inputNameToIndex;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"iden3.storage.CredentialAtomicQueryValidator\\\")) - 1))\\n    //  & ~bytes32(uint256(0xff));\\n    bytes32 private constant CredentialAtomicQueryValidatorBaseStorageLocation =\\n        0x28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287500;\\n\\n    /// @dev Get the main storage using assembly to ensure specific storage location\\n    function _getCredentialAtomicQueryValidatorBaseStorage()\\n        internal\\n        pure\\n        returns (CredentialAtomicQueryValidatorBaseStorage storage $)\\n    {\\n        assembly {\\n            $.slot := CredentialAtomicQueryValidatorBaseStorageLocation\\n        }\\n    }\\n\\n    function _initDefaultStateVariables(\\n        address _stateContractAddr,\\n        address _verifierContractAddr,\\n        string memory circuitId\\n    ) internal {\\n        CredentialAtomicQueryValidatorBaseStorage\\n            storage s = _getCredentialAtomicQueryValidatorBaseStorage();\\n\\n        s.revocationStateExpirationTimeout = 1 hours;\\n        s.proofExpirationTimeout = 1 hours;\\n        s.gistRootExpirationTimeout = 1 hours;\\n        s._supportedCircuitIds = [circuitId];\\n        s._circuitIdToVerifier[circuitId] = IVerifier(_verifierContractAddr);\\n        s.state = IState(_stateContractAddr);\\n        __Ownable_init(_msgSender());\\n    }\\n\\n    function version() public pure virtual returns (string memory);\\n\\n    function setRevocationStateExpirationTimeout(\\n        uint256 expirationTimeout\\n    ) public virtual onlyOwner {\\n        _getCredentialAtomicQueryValidatorBaseStorage()\\n            .revocationStateExpirationTimeout = expirationTimeout;\\n    }\\n\\n    function getRevocationStateExpirationTimeout() public view virtual returns (uint256) {\\n        return _getCredentialAtomicQueryValidatorBaseStorage().revocationStateExpirationTimeout;\\n    }\\n\\n    function setProofExpirationTimeout(uint256 expirationTimeout) public virtual onlyOwner {\\n        _getCredentialAtomicQueryValidatorBaseStorage().proofExpirationTimeout = expirationTimeout;\\n    }\\n\\n    function getProofExpirationTimeout() public view virtual returns (uint256) {\\n        return _getCredentialAtomicQueryValidatorBaseStorage().proofExpirationTimeout;\\n    }\\n\\n    function setGISTRootExpirationTimeout(uint256 expirationTimeout) public virtual onlyOwner {\\n        _getCredentialAtomicQueryValidatorBaseStorage()\\n            .gistRootExpirationTimeout = expirationTimeout;\\n    }\\n\\n    function getGISTRootExpirationTimeout() public view virtual returns (uint256) {\\n        return _getCredentialAtomicQueryValidatorBaseStorage().gistRootExpirationTimeout;\\n    }\\n\\n    function setStateAddress(address stateContractAddr) public virtual onlyOwner {\\n        _getCredentialAtomicQueryValidatorBaseStorage().state = IState(stateContractAddr);\\n    }\\n\\n    function getStateAddress() public view virtual returns (address) {\\n        return address(_getCredentialAtomicQueryValidatorBaseStorage().state);\\n    }\\n\\n    function verify(\\n        uint256[] calldata inputs,\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        bytes calldata data,\\n        address sender\\n    ) external view virtual returns (ICircuitValidator.KeyToInputIndex[] memory);\\n\\n    function getSupportedCircuitIds() external view virtual returns (string[] memory ids) {\\n        return _getCredentialAtomicQueryValidatorBaseStorage()._supportedCircuitIds;\\n    }\\n\\n    function inputIndexOf(string memory name) public view virtual returns (uint256) {\\n        uint256 index = _getCredentialAtomicQueryValidatorBaseStorage()._inputNameToIndex[name];\\n        require(index != 0, \\\"Input name not found\\\");\\n        return --index; // we save 1-based index, but return 0-based\\n    }\\n\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n        return\\n            interfaceId == type(ICircuitValidator).interfaceId ||\\n            super.supportsInterface(interfaceId);\\n    }\\n\\n    function _checkGistRoot(uint256 gistRoot) internal view {\\n        CredentialAtomicQueryValidatorBaseStorage\\n            storage s = _getCredentialAtomicQueryValidatorBaseStorage();\\n        IState.GistRootInfo memory rootInfo = s.state.getGISTRootInfo(gistRoot);\\n        require(rootInfo.root == gistRoot, \\\"Gist root state isn't in state contract\\\");\\n        if (\\n            rootInfo.replacedAtTimestamp != 0 &&\\n            block.timestamp - rootInfo.replacedAtTimestamp > s.gistRootExpirationTimeout\\n        ) {\\n            revert(\\\"Gist root is expired\\\");\\n        }\\n    }\\n\\n    function _checkClaimIssuanceState(uint256 _id, uint256 _state) internal view {\\n        bool isStateGenesis = GenesisUtils.isGenesisState(_id, _state);\\n\\n        if (!isStateGenesis) {\\n            IState.StateInfo memory stateInfo = _getCredentialAtomicQueryValidatorBaseStorage()\\n                .state\\n                .getStateInfoByIdAndState(_id, _state);\\n            require(_id == stateInfo.id, \\\"State doesn't exist in state contract\\\");\\n        }\\n    }\\n\\n    function _checkClaimNonRevState(uint256 _id, uint256 _claimNonRevState) internal view {\\n        CredentialAtomicQueryValidatorBaseStorage\\n            storage s = _getCredentialAtomicQueryValidatorBaseStorage();\\n\\n        // check if identity transited any state in contract\\n        bool idExists = s.state.idExists(_id);\\n\\n        // if identity didn't transit any state it must be genesis\\n        if (!idExists) {\\n            require(\\n                GenesisUtils.isGenesisState(_id, _claimNonRevState),\\n                \\\"Issuer revocation state doesn't exist in state contract and is not genesis\\\"\\n            );\\n        } else {\\n            IState.StateInfo memory claimNonRevStateInfo = s.state.getStateInfoById(_id);\\n            // The non-empty state is returned, and it's not equal to the state that the user has provided.\\n            if (claimNonRevStateInfo.state != _claimNonRevState) {\\n                // Get the time of the latest state and compare it to the transition time of state provided by the user.\\n                IState.StateInfo memory claimNonRevLatestStateInfo = s\\n                    .state\\n                    .getStateInfoByIdAndState(_id, _claimNonRevState);\\n\\n                if (claimNonRevLatestStateInfo.id == 0 || claimNonRevLatestStateInfo.id != _id) {\\n                    revert(\\\"State in transition info contains invalid id\\\");\\n                }\\n\\n                if (claimNonRevLatestStateInfo.replacedAtTimestamp == 0) {\\n                    revert(\\\"Non-Latest state doesn't contain replacement information\\\");\\n                }\\n\\n                if (\\n                    block.timestamp - claimNonRevLatestStateInfo.replacedAtTimestamp >\\n                    s.revocationStateExpirationTimeout\\n                ) {\\n                    revert(\\\"Non-Revocation state of Issuer expired\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkProofExpiration(uint256 _proofGenerationTimestamp) internal view {\\n        if (_proofGenerationTimestamp > block.timestamp) {\\n            revert(\\\"Proof generated in the future is not valid\\\");\\n        }\\n        if (\\n            block.timestamp - _proofGenerationTimestamp >\\n            _getCredentialAtomicQueryValidatorBaseStorage().proofExpirationTimeout\\n        ) {\\n            revert(\\\"Generated proof is outdated\\\");\\n        }\\n    }\\n\\n    function _checkAllowedIssuers(uint256 issuerId, uint256[] memory allowedIssuers) internal pure {\\n        // empty array is 'allow all' equivalent - ['*']\\n        if (allowedIssuers.length == 0) {\\n            return;\\n        }\\n\\n        for (uint i = 0; i < allowedIssuers.length; i++) {\\n            if (issuerId == allowedIssuers[i]) {\\n                return;\\n            }\\n        }\\n\\n        revert(\\\"Issuer is not on the Allowed Issuers list\\\");\\n    }\\n\\n    function _checkChallenge(uint256 challenge, address sender) internal pure {\\n        require(\\n            PrimitiveTypeUtils.uint256LEToAddress(challenge) == sender,\\n            \\\"Challenge should match the sender\\\"\\n        );\\n    }\\n\\n    function _setInputToIndex(string memory inputName, uint256 index) internal {\\n        // increment index to avoid 0\\n        _getCredentialAtomicQueryValidatorBaseStorage()._inputNameToIndex[inputName] = ++index;\\n    }\\n}\\n\",\"keccak256\":\"0xa9fc03a063c2a78ac5cdb003bb360f66673ef7cac56c3ef605ef256b6f8f0adb\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts-upgradeable/access/Ownable2StepUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable2Step.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {OwnableUpgradeable} from \\\"./OwnableUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is specified at deployment time in the constructor for `Ownable`. This\\n * can later be changed with {transferOwnership} and {acceptOwnership}.\\n *\\n * This module is used through inheritance. It will make available all functions\\n * from parent (Ownable).\\n */\\nabstract contract Ownable2StepUpgradeable is Initializable, OwnableUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable2Step\\n    struct Ownable2StepStorage {\\n        address _pendingOwner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable2Step\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant Ownable2StepStorageLocation = 0x237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00;\\n\\n    function _getOwnable2StepStorage() private pure returns (Ownable2StepStorage storage $) {\\n        assembly {\\n            $.slot := Ownable2StepStorageLocation\\n        }\\n    }\\n\\n    event OwnershipTransferStarted(address indexed previousOwner, address indexed newOwner);\\n\\n    function __Ownable2Step_init() internal onlyInitializing {\\n    }\\n\\n    function __Ownable2Step_init_unchained() internal onlyInitializing {\\n    }\\n    /**\\n     * @dev Returns the address of the pending owner.\\n     */\\n    function pendingOwner() public view virtual returns (address) {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        return $._pendingOwner;\\n    }\\n\\n    /**\\n     * @dev Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one.\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual override onlyOwner {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        $._pendingOwner = newOwner;\\n        emit OwnershipTransferStarted(owner(), newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`) and deletes any pending owner.\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual override {\\n        Ownable2StepStorage storage $ = _getOwnable2StepStorage();\\n        delete $._pendingOwner;\\n        super._transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev The new owner accepts the ownership transfer.\\n     */\\n    function acceptOwnership() public virtual {\\n        address sender = _msgSender();\\n        if (pendingOwner() != sender) {\\n            revert OwnableUnauthorizedAccount(sender);\\n        }\\n        _transferOwnership(sender);\\n    }\\n}\\n\",\"keccak256\":\"0xbca4a4f66d98028293dba695851d1b20d3e0ba2fff7453fb241f192fa3fc6b6f\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {ContextUpgradeable} from \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * The initial owner is set to the address provided by the deployer. This can\\n * later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    /// @custom:storage-location erc7201:openzeppelin.storage.Ownable\\n    struct OwnableStorage {\\n        address _owner;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Ownable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant OwnableStorageLocation = 0x9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c199300;\\n\\n    function _getOwnableStorage() private pure returns (OwnableStorage storage $) {\\n        assembly {\\n            $.slot := OwnableStorageLocation\\n        }\\n    }\\n\\n    /**\\n     * @dev The caller account is not authorized to perform an operation.\\n     */\\n    error OwnableUnauthorizedAccount(address account);\\n\\n    /**\\n     * @dev The owner is not a valid owner account. (eg. `address(0)`)\\n     */\\n    error OwnableInvalidOwner(address owner);\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the address provided by the deployer as the initial owner.\\n     */\\n    function __Ownable_init(address initialOwner) internal onlyInitializing {\\n        __Ownable_init_unchained(initialOwner);\\n    }\\n\\n    function __Ownable_init_unchained(address initialOwner) internal onlyInitializing {\\n        if (initialOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(initialOwner);\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        return $._owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        if (owner() != _msgSender()) {\\n            revert OwnableUnauthorizedAccount(_msgSender());\\n        }\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        if (newOwner == address(0)) {\\n            revert OwnableInvalidOwner(address(0));\\n        }\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        OwnableStorage storage $ = _getOwnableStorage();\\n        address oldOwner = $._owner;\\n        $._owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\\n\",\"keccak256\":\"0xc163fcf9bb10138631a9ba5564df1fa25db9adff73bd9ee868a8ae1858fe093a\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Storage of the initializable contract.\\n     *\\n     * It's implemented on a custom ERC-7201 namespace to reduce the risk of storage collisions\\n     * when using with upgradeable contracts.\\n     *\\n     * @custom:storage-location erc7201:openzeppelin.storage.Initializable\\n     */\\n    struct InitializableStorage {\\n        /**\\n         * @dev Indicates that the contract has been initialized.\\n         */\\n        uint64 _initialized;\\n        /**\\n         * @dev Indicates that the contract is in the process of being initialized.\\n         */\\n        bool _initializing;\\n    }\\n\\n    // keccak256(abi.encode(uint256(keccak256(\\\"openzeppelin.storage.Initializable\\\")) - 1)) & ~bytes32(uint256(0xff))\\n    bytes32 private constant INITIALIZABLE_STORAGE = 0xf0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00;\\n\\n    /**\\n     * @dev The contract is already initialized.\\n     */\\n    error InvalidInitialization();\\n\\n    /**\\n     * @dev The contract is not initializing.\\n     */\\n    error NotInitializing();\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint64 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that in the context of a constructor an `initializer` may be invoked any\\n     * number of times. This behavior in the constructor can be useful during testing and is not expected to be used in\\n     * production.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        // Cache values to avoid duplicated sloads\\n        bool isTopLevelCall = !$._initializing;\\n        uint64 initialized = $._initialized;\\n\\n        // Allowed calls:\\n        // - initialSetup: the contract is not in the initializing state and no previous version was\\n        //                 initialized\\n        // - construction: the contract is initialized at version 1 (no reininitialization) and the\\n        //                 current contract is just being deployed\\n        bool initialSetup = initialized == 0 && isTopLevelCall;\\n        bool construction = initialized == 1 && address(this).code.length == 0;\\n\\n        if (!initialSetup && !construction) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = 1;\\n        if (isTopLevelCall) {\\n            $._initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            $._initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: Setting the version to 2**64 - 1 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint64 version) {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing || $._initialized >= version) {\\n            revert InvalidInitialization();\\n        }\\n        $._initialized = version;\\n        $._initializing = true;\\n        _;\\n        $._initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        _checkInitializing();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Reverts if the contract is not in an initializing state. See {onlyInitializing}.\\n     */\\n    function _checkInitializing() internal view virtual {\\n        if (!_isInitializing()) {\\n            revert NotInitializing();\\n        }\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        // solhint-disable-next-line var-name-mixedcase\\n        InitializableStorage storage $ = _getInitializableStorage();\\n\\n        if ($._initializing) {\\n            revert InvalidInitialization();\\n        }\\n        if ($._initialized != type(uint64).max) {\\n            $._initialized = type(uint64).max;\\n            emit Initialized(type(uint64).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint64) {\\n        return _getInitializableStorage()._initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _getInitializableStorage()._initializing;\\n    }\\n\\n    /**\\n     * @dev Returns a pointer to the storage namespace.\\n     */\\n    // solhint-disable-next-line var-name-mixedcase\\n    function _getInitializableStorage() private pure returns (InitializableStorage storage $) {\\n        assembly {\\n            $.slot := INITIALIZABLE_STORAGE\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x631188737069917d2f909d29ce62c4d48611d326686ba6683e26b72a23bfac0b\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.1) (utils/Context.sol)\\n\\npragma solidity ^0.8.20;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n}\\n\",\"keccak256\":\"0xdbef5f0c787055227243a7318ef74c8a5a1108ca3a07f2b3a00ef67769e1e397\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/ERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/ERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\nimport {IERC165} from \\\"./IERC165.sol\\\";\\n\\n/**\\n * @dev Implementation of the {IERC165} interface.\\n *\\n * Contracts that want to implement ERC165 should inherit from this contract and override {supportsInterface} to check\\n * for the additional interface id that will be supported. For example:\\n *\\n * ```solidity\\n * function supportsInterface(bytes4 interfaceId) public view virtual override returns (bool) {\\n *     return interfaceId == type(MyInterface).interfaceId || super.supportsInterface(interfaceId);\\n * }\\n * ```\\n */\\nabstract contract ERC165 is IERC165 {\\n    /**\\n     * @dev See {IERC165-supportsInterface}.\\n     */\\n    function supportsInterface(bytes4 interfaceId) public view virtual returns (bool) {\\n        return interfaceId == type(IERC165).interfaceId;\\n    }\\n}\\n\",\"keccak256\":\"0x9e8778b14317ba9e256c30a76fd6c32b960af621987f56069e1e819c77c6a133\",\"license\":\"MIT\"},\"@openzeppelin/contracts/utils/introspection/IERC165.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v5.0.0) (utils/introspection/IERC165.sol)\\n\\npragma solidity ^0.8.20;\\n\\n/**\\n * @dev Interface of the ERC165 standard, as defined in the\\n * https://eips.ethereum.org/EIPS/eip-165[EIP].\\n *\\n * Implementers can declare support of contract interfaces, which can then be\\n * queried by others ({ERC165Checker}).\\n *\\n * For an implementation, see {ERC165}.\\n */\\ninterface IERC165 {\\n    /**\\n     * @dev Returns true if this contract implements the interface defined by\\n     * `interfaceId`. See the corresponding\\n     * https://eips.ethereum.org/EIPS/eip-165#how-interfaces-are-identified[EIP section]\\n     * to learn more about how these ids are created.\\n     *\\n     * This function call must use less than 30 000 gas.\\n     */\\n    function supportsInterface(bytes4 interfaceId) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x4296879f55019b23e135000eb36896057e7101fb7fb859c5ef690cf14643757b\",\"license\":\"MIT\"},\"contracts/validators/CredentialAtomicQuerySigV2Validator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport {IVerifier} from \\\"@iden3/contracts/interfaces/IVerifier.sol\\\";\\nimport {ICircuitValidator} from \\\"@iden3/contracts/interfaces/ICircuitValidator.sol\\\";\\nimport {CredentialAtomicQueryV2ValidatorBase} from \\\"./CredentialAtomicQueryV2ValidatorBase.sol\\\";\\n\\ncontract CredentialAtomicQuerySigV2Validator is\\n    CredentialAtomicQueryV2ValidatorBase\\n{\\n    /**\\n     * @dev Version of contract\\n     */\\n    string public constant VERSION = \\\"2.0.1\\\";\\n\\n    string internal constant CIRCUIT_ID = \\\"credentialAtomicQuerySigV2OnChain\\\";\\n\\n    function initialize(\\n        address _verifierContractAddr,\\n        address _stateContractAddr\\n    ) public initializer {\\n        _setInputToIndex(\\\"merklized\\\", 0);\\n        _setInputToIndex(\\\"userID\\\", 1);\\n        _setInputToIndex(\\\"circuitQueryHash\\\", 2);\\n        _setInputToIndex(\\\"issuerAuthState\\\", 3);\\n        _setInputToIndex(\\\"requestID\\\", 4);\\n        _setInputToIndex(\\\"challenge\\\", 5);\\n        _setInputToIndex(\\\"gistRoot\\\", 6);\\n        _setInputToIndex(\\\"issuerID\\\", 7);\\n        _setInputToIndex(\\\"isRevocationChecked\\\", 8);\\n        _setInputToIndex(\\\"issuerClaimNonRevState\\\", 9);\\n        _setInputToIndex(\\\"timestamp\\\", 10);\\n\\n        _initDefaultStateVariables(\\n            _stateContractAddr,\\n            _verifierContractAddr,\\n            CIRCUIT_ID\\n        );\\n        __Ownable_init(_msgSender());\\n    }\\n\\n    function version() public pure override returns (string memory) {\\n        return VERSION;\\n    }\\n\\n    function parsePubSignals(\\n        uint256[] calldata inputs\\n    ) public pure override returns (PubSignals memory) {\\n        PubSignals memory params = PubSignals({\\n            merklized: inputs[0],\\n            userID: inputs[1],\\n            circuitQueryHash: inputs[2],\\n            issuerState: inputs[3],\\n            requestID: inputs[4],\\n            challenge: inputs[5],\\n            gistRoot: inputs[6],\\n            issuerID: inputs[7],\\n            isRevocationChecked: inputs[8],\\n            issuerClaimNonRevState: inputs[9],\\n            timestamp: inputs[10]\\n        });\\n\\n        return params;\\n    }\\n}\\n\",\"keccak256\":\"0x2e9fc4faaaa7a78d0ad22d2f51dc319535e919509c0f87eb27cc84e94c797ff5\",\"license\":\"GPL-3.0\"},\"contracts/validators/CredentialAtomicQueryV2ValidatorBase.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.20;\\n\\nimport {CredentialAtomicQueryValidatorBase} from \\\"@iden3/contracts/validators/CredentialAtomicQueryValidatorBase.sol\\\";\\nimport {IVerifier} from \\\"@iden3/contracts/interfaces/IVerifier.sol\\\";\\nimport {ICircuitValidator} from \\\"@iden3/contracts/interfaces/ICircuitValidator.sol\\\";\\n\\nabstract contract CredentialAtomicQueryV2ValidatorBase is\\n    CredentialAtomicQueryValidatorBase\\n{\\n    /**\\n     * @dev Version of contract\\n     */\\n\\n    struct CredentialAtomicQuery {\\n        uint256 schema;\\n        uint256 claimPathKey;\\n        uint256 operator;\\n        uint256 slotIndex;\\n        uint256[] value;\\n        uint256 queryHash;\\n        uint256[] allowedIssuers;\\n        string[] circuitIds;\\n        bool skipClaimRevocationCheck;\\n        // 0 for inclusion in merklized credentials, 1 for non-inclusion and for non-merklized credentials\\n        uint256 claimPathNotExists;\\n    }\\n\\n    struct PubSignals {\\n        uint256 merklized;\\n        uint256 userID;\\n        uint256 issuerState;\\n        uint256 circuitQueryHash;\\n        uint256 requestID;\\n        uint256 challenge;\\n        uint256 gistRoot;\\n        uint256 issuerID;\\n        uint256 isRevocationChecked;\\n        uint256 issuerClaimNonRevState;\\n        uint256 timestamp;\\n    }\\n\\n    function version() public pure virtual override returns (string memory);\\n\\n    function parsePubSignals(\\n        uint256[] calldata inputs\\n    ) public pure virtual returns (PubSignals memory);\\n\\n    function verify(\\n        uint256[] calldata inputs,\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        bytes calldata data,\\n        address sender\\n    )\\n        external\\n        view\\n        override\\n        returns (ICircuitValidator.KeyToInputIndex[] memory)\\n    {\\n        CredentialAtomicQuery memory credAtomicQuery = abi.decode(\\n            data,\\n            (CredentialAtomicQuery)\\n        );\\n        IVerifier verifier = _getCredentialAtomicQueryValidatorBaseStorage()\\n            ._circuitIdToVerifier[credAtomicQuery.circuitIds[0]];\\n\\n        require(\\n            credAtomicQuery.circuitIds.length == 1 &&\\n                verifier != IVerifier(address(0)),\\n            \\\"Invalid circuit ID\\\"\\n        );\\n\\n        // verify that zkp is valid\\n        require(verifier.verify(a, b, c, inputs), \\\"Proof is not valid\\\");\\n\\n        PubSignals memory signals = parsePubSignals(inputs);\\n\\n        // check circuitQueryHash\\n        require(\\n            signals.circuitQueryHash == credAtomicQuery.queryHash,\\n            \\\"Query hash does not match the requested one\\\"\\n        );\\n\\n        // TODO: add support for query to specific userID and then verifying it\\n\\n        _checkMerklized(signals.merklized, credAtomicQuery.claimPathKey);\\n        // Nexera ID: TODO: figure out why this does work ('Root does not exist')\\n        //_checkGistRoot(signals.gistRoot);\\n        _checkAllowedIssuers(signals.issuerID, credAtomicQuery.allowedIssuers);\\n        _checkClaimIssuanceState(signals.issuerID, signals.issuerState);\\n        // Nexera ID: TODO: figure out why this does work ('Proof generated in the future is not valid')\\n        // _checkClaimNonRevState(\\n        //     signals.issuerID,\\n        //     signals.issuerClaimNonRevState\\n        // );\\n        // _checkProofExpiration(signals.timestamp);\\n        // _checkIsRevocationChecked(\\n        //     signals.isRevocationChecked,\\n        //     credAtomicQuery.skipClaimRevocationCheck\\n        // );\\n\\n        // Checking challenge to prevent replay attacks from other addresses\\n        _checkChallenge(signals.challenge, sender);\\n\\n        // selective disclosure is not supported for v2 onchain circuits\\n        return _getSpecialInputPairs();\\n    }\\n\\n    function _checkMerklized(\\n        uint256 merklized,\\n        uint256 queryClaimPathKey\\n    ) internal pure {\\n        uint256 shouldBeMerklized = queryClaimPathKey != 0 ? 1 : 0;\\n        require(\\n            merklized == shouldBeMerklized,\\n            \\\"Merklized value is not correct\\\"\\n        );\\n    }\\n\\n    function _checkIsRevocationChecked(\\n        uint256 isRevocationChecked,\\n        bool skipClaimRevocationCheck\\n    ) internal pure {\\n        uint256 expectedIsRevocationChecked = 1;\\n        if (skipClaimRevocationCheck) {\\n            expectedIsRevocationChecked = 0;\\n        }\\n        require(\\n            isRevocationChecked == expectedIsRevocationChecked,\\n            \\\"Revocation check should match the query\\\"\\n        );\\n    }\\n\\n    function _getSpecialInputPairs()\\n        internal\\n        pure\\n        returns (ICircuitValidator.KeyToInputIndex[] memory)\\n    {\\n        ICircuitValidator.KeyToInputIndex[]\\n            memory pairs = new ICircuitValidator.KeyToInputIndex[](2);\\n        pairs[0] = ICircuitValidator.KeyToInputIndex({\\n            key: \\\"userID\\\",\\n            inputIndex: 1\\n        });\\n        pairs[1] = ICircuitValidator.KeyToInputIndex({\\n            key: \\\"timestamp\\\",\\n            inputIndex: 10\\n        });\\n        return pairs;\\n    }\\n}\\n\",\"keccak256\":\"0xf086ee9191df5bb654df33e4f76f023baffac39cf77e12ed6035cf4a6602410f\",\"license\":\"GPL-3.0\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equal_nonAligned(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let endMinusWord := add(_preBytes, length)\\n                let mc := add(_preBytes, 0x20)\\n                let cc := add(_postBytes, 0x20)\\n\\n                for {\\n                // the next line is the loop condition:\\n                // while(uint256(mc < endWord) + cb == 2)\\n                } eq(add(lt(mc, endMinusWord), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n\\n                // Only if still successful\\n                // For <1 word tail bytes\\n                if gt(success, 0) {\\n                    // Get the remainder of length/32\\n                    // length % 32 = AND(length, 32 - 1)\\n                    let numTailBytes := and(length, 0x1f)\\n                    let mcRem := mload(mc)\\n                    let ccRem := mload(cc)\\n                    for {\\n                        let i := 0\\n                    // the next line is the loop condition:\\n                    // while(uint256(i < numTailBytes) + cb == 2)\\n                    } eq(add(lt(i, numTailBytes), cb), 2) {\\n                        i := add(i, 1)\\n                    } {\\n                        if iszero(eq(byte(i, mcRem), byte(i, ccRem))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x608080604052346100165761254a908161001c8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146101625780631134b4801461015d5780631c4c7fd81461015857806331969e5714610153578063485cc9551461014e57806348d369201461014957806354fd4d5014610103578063652377dc14610144578063715018a61461013f57806379ba50971461013a5780638c752c75146101355780638da5cb5b14610130578063af4c4fd51461012b578063b16a394f14610126578063ba47e32a14610121578063e30c39781461011c578063f177a69e14610117578063f2fde38b14610112578063f718c5861461010d578063fb5af2a2146101085763ffa1ad741461010357600080fd5b61048d565b610bcc565b610abd565b610a36565b610992565b61089a565b61085d565b6107d1565b610662565b61062c565b6105ef565b61059c565b610517565b6104d7565b610405565b6102cb565b610295565b610240565b6101bd565b346101b85760203660031901126101b85760043563ffffffff60e01b81168091036101b85760209063efba202360e01b81149081156101a7575b506040519015158152f35b6301ffc9a760e01b1490503861019c565b600080fd5b346101b85760203660031901126101b8576101d6610e59565b6004357f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750555005b600435906001600160a01b03821682036101b857565b602435906001600160a01b03821682036101b857565b61014435906001600160a01b03821682036101b857565b346101b85760203660031901126101b85761029361025c6101fd565b610264610e59565b6000805160206124b583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b005b346101b85760003660031901126101b8576000805160206124b5833981519152546040516001600160a01b039091168152602090f35b346101b85760403660031901126101b8576102e46101fd565b6102ec610213565b906000805160206124d583398151915254916001600160401b0360ff8460401c16159316801590816103fd575b60011490816103f3575b1590816103ea575b506103d8576000805160206124d5833981519152805467ffffffffffffffff1916600117905561035f91836103ae57611022565b61036557005b6000805160206124d5833981519152805460ff60401b19169055604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b6000805160206124d5833981519152805460ff60401b191668010000000000000000179055611022565b60405163f92ee8a960e01b8152600490fd5b9050153861032b565b303b159150610323565b849150610319565b346101b85760203660031901126101b85761041e610e59565b6004357f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750455005b60005b8381106104585750506000910152565b8181015183820152602001610448565b9060209161048181518092818552858086019101610445565b601f01601f1916010190565b346101b85760003660031901126101b8576104d36040516104ad816106d5565b6005815264322e302e3160d81b6020820152604051918291602083526020830190610468565b0390f35b346101b85760203660031901126101b8576104f0610e59565b6004357f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750355005b346101b85760008060031936011261059957610531610e59565b6000805160206124f583398151915280546001600160a01b03199081169091556000805160206124958339815191528054918216905581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346101b85760003660031901126101b8576000805160206124f583398151915254336001600160a01b03909116036105d75761029333610deb565b60405163118cdaa760e01b8152336004820152602490fd5b346101b85760003660031901126101b85760207f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750554604051908152f35b346101b85760003660031901126101b857600080516020612495833981519152546040516001600160a01b039091168152602090f35b346101b85760003660031901126101b85760207f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750354604051908152f35b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b038211176106d057604052565b61069f565b604081019081106001600160401b038211176106d057604052565b606081019081106001600160401b038211176106d057604052565b90601f801991011681019081106001600160401b038211176106d057604052565b6040519061016082018281106001600160401b038211176106d057604052565b6040519061014082018281106001600160401b038211176106d057604052565b60405190610779826106d5565b565b81601f820112156101b8578035906001600160401b0382116106d057604051926107af601f8401601f19166020018561070b565b828452602083830101116101b857816000926020809301838601378301015290565b346101b85760203660031901126101b8576004356001600160401b0381116101b85761080461080991369060040161077b565b610d4b565b54801561082157604051600019919091018152602090f35b60405162461bcd60e51b8152602060048201526014602482015273125b9c1d5d081b985b59481b9bdd08199bdd5b9960621b6044820152606490fd5b346101b85760003660031901126101b85760207f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750454604051908152f35b346101b85760003660031901126101b8576000805160206124f5833981519152546040516001600160a01b039091168152602090f35b9181601f840112156101b8578235916001600160401b0383116101b8576020808501948460051b0101116101b857565b906024916064116101b857565b9060e491610124116101b857565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610950575050505050505090565b909192939495968580600192603f198582030187528a5190828061097b84518a85528a850190610468565b93015191015299019401940192959493919061093f565b346101b8576101603660031901126101b8576001600160401b036004358181116101b8576109c49036906004016108d0565b906109ce36610900565b923660e4116101b8576109e03661090d565b9161012435928284116101b857366023850112156101b85783600401359283116101b85736602484860101116101b8576104d395610a2a956024610a22610229565b960193611ad9565b6040519182918261091b565b346101b85760203660031901126101b857610a4f6101fd565b610a57610e59565b6000805160206124f583398151915280546001600160a01b0319166001600160a01b03928316908117909155600080516020612495833981519152549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b346101b85760203660031901126101b8576004356001600160401b0381116101b857610af9610af36101609236906004016108d0565b906116a7565b60405190805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080820151908301526101408091015190820152f35b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610b9e5750505050505090565b9091929394958480610bbc600193603f198682030187528a51610468565b9801930193019194939290610b8e565b346101b857600080600319360112610599577f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750190815490610c0c82610cfa565b91604091610c1c8351948561070b565b8184529384527fabff3b23bb0cb48bf8af6c9a19292e3671159a93c05f3dc6ba7a90443edecb57938060208086015b848310610c5f578551806104d38982610b6a565b85518285928a5492610c7084610d11565b808252600194808616908115610cde5750600114610ca6575b50610c9881600196038261070b565b815201980192019196610c4b565b8c8952838920955088905b808210610cc75750810183019450610c98610c89565b865483830186015295850195879490910190610cb1565b60ff19168584015250151560051b810183019450610c98610c89565b6001600160401b0381116106d05760051b60200190565b90600182811c92168015610d41575b6020831014610d2b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d20565b6020610d64918160405193828580945193849201610445565b81017f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750681520301902090565b6020610da9918160405193828580945193849201610445565b81017f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750081520301902090565b634e487b7160e01b600052601160045260246000fd5b6000805160206124f583398151915280546001600160a01b031990811690915560008051602061249583398151915280549182166001600160a01b0393841690811790915591167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b600080516020612495833981519152546001600160a01b031633036105d757565b60405190610e87826106d5565b60068252651d5cd95c925160d21b6020830152565b60405190610ea9826106d5565b600f82526e69737375657241757468537461746560881b6020830152565b60405190610ed4826106d5565b60098252681c995c5d595cdd125160ba1b6020830152565b60405190610ef9826106d5565b60098252686368616c6c656e676560b81b6020830152565b60405190610f1e826106d5565b600882526719da5cdd149bdbdd60c21b6020830152565b60405190610f42826106d5565b60088252671a5cdcdd595c925160c21b6020830152565b60405190610f66826106d5565b60138252721a5cd4995d9bd8d85d1a5bdb90da1958dad959606a1b6020830152565b60405190610f95826106d5565b6016825275697373756572436c61696d4e6f6e526576537461746560501b6020830152565b60405190610fc7826106d5565b6009825268074696d657374616d760bc1b6020830152565b60405190610fec826106f0565b60218252603760f91b6040837f63726564656e7469616c41746f6d6963517565727953696756324f6e4368616960208201520152565b90611124916001611053604051611038816106d5565b60098152681b595c9adb1a5e995960ba1b6020820152610d4b565b556002611061610804610e7a565b556003611095604051611073816106d5565b601081526f0c6d2e4c6ead2e8a2eacae4f290c2e6d60831b6020820152610d4b565b556110a66110a1610e9c565b6114bb565b6110b66110b1610ec7565b6114c9565b6110c66110c1610eec565b6114d4565b6110d66110d1610f11565b6114df565b6110e66110e1610f35565b6114ea565b6110f66110f1610f59565b6114f5565b611106611101610f88565b611500565b611116611111610fba565b61150b565b61111e610fdf565b91611257565b61077933611516565b818110611138575050565b6000815560010161112d565b9190601f811161115357505050565b610779926000526020600020906020601f840160051c8301931061117f575b601f0160051c019061112d565b9091508190611172565b91909182516001600160401b0381116106d0576111b0816111aa8454610d11565b84611144565b602080601f83116001146111ec5750819293946000926111e1575b50508160011b916000199060031b1c1916179055565b0151905038806111cb565b90601f1983169561120285600052602060002090565b926000905b88821061123f57505083600195969710611226575b505050811b019055565b015160001960f88460031b161c1916905538808061121c565b80600185968294968601518155019501930190611207565b929192610e10807f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750355807f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287504557f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287505556040516112d1816106b5565b8481527f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287501908154916001928382558084106113e7575b50507f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e182875016000527fabff3b23bb0cb48bf8af6c9a19292e3671159a93c05f3dc6ba7a90443edecb57906000905b8382106113cb5750949561112495506001600160a01b039461139c93508516915061137d90610d90565b80546001600160a01b0319166001600160a01b03909216919091179055565b6000805160206124b58339815191528054919092166001600160a01b03166001600160a01b0319909116179055565b836020826113db83945187611189565b01930191019091611353565b60009182527fabff3b23bb0cb48bf8af6c9a19292e3671159a93c05f3dc6ba7a90443edecb570190837fabff3b23bb0cb48bf8af6c9a19292e3671159a93c05f3dc6ba7a90443edecb585b838110611440575050611307565b61144a8154610d11565b80611459575b50018490611432565b601f9083828211600114611474575050508281555b38611450565b6114959261148785600052602060002090565b920160051c8201910161112d565b6000818152602081208183555561146e565b60001981146114b65760010190565b610dd5565b6114c6600491610d4b565b55565b6114c6600591610d4b565b6114c6600691610d4b565b6114c6600791610d4b565b6114c6600891610d4b565b6114c6600991610d4b565b6114c6600a91610d4b565b6114c6600b91610d4b565b61151e611557565b611526611557565b6001600160a01b0381161561153e5761077990610deb565b604051631e4fbdf760e01b815260006004820152602490fd5b60ff6000805160206124d58339815191525460401c161561157457565b604051631afcd79f60e31b8152600490fd5b6040519061016082018281106001600160401b038211176106d057604052816101406000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b634e487b7160e01b600052603260045260246000fd5b90156116095790565b6115ea565b90600110156116095760200190565b90600210156116095760400190565b90600310156116095760600190565b90600410156116095760800190565b90600510156116095760a00190565b90600610156116095760c00190565b90600710156116095760e00190565b9060081015611609576101000190565b9060091015611609576101200190565b90600a1015611609576101400190565b906116b0611586565b506116bb8183611600565b35916116c7828261160e565b35916116d3818361161d565b356116de828461162c565b35906116ea838561163b565b356116f5848661164a565b35906117018587611659565b359261170d8688611668565b359461172f61171c888a611677565b3597611728818b611687565b3599611697565b359861173961072c565b9a8b5260208b015260408a01526060890152608088015260a087015260c086015260e085015261010084015261012083015261014082015290565b81601f820112156101b85780359161178b83610cfa565b92611799604051948561070b565b808452602092838086019260051b8201019283116101b8578301905b8282106117c3575050505090565b813581529083019083016117b5565b9080601f830112156101b8578135906117ea82610cfa565b926117f8604051948561070b565b828452602092838086019160051b830101928084116101b857848301915b8483106118265750505050505090565b82356001600160401b0381116101b85786916118478484809489010161077b565b815201920191611816565b801515036101b857565b359061077982611852565b6020818303126101b85780356001600160401b03918282116101b8570190610140828403126101b85761189861074c565b928235845260208301356020850152604083013560408501526060830135606085015260808301358281116101b857816118d3918501611774565b608085015260a083013560a085015260c08301358281116101b857816118fa918501611774565b60c085015260e08301359182116101b8576119169183016117d2565b60e083015261010061192981830161185c565b90830152610120809101359082015290565b8051156116095760200190565b8051600110156116095760400190565b80518210156116095760209160051b010190565b1561197357565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818da5c98dd5a5d08125160721b6044820152606490fd5b908160209103126101b857516119c281611852565b90565b929391604080928537606460008584015b8460028310611a18575050505060c0840137610120610100830181905282018190526001600160fb1b0381116101b85760051b90816101409384830137010190565b8082818660019537019301910190916119d6565b6040513d6000823e3d90fd5b15611a3f57565b60405162461bcd60e51b8152602060048201526012602482015271141c9bdbd9881a5cc81b9bdd081d985b1a5960721b6044820152606490fd5b15611a8057565b60405162461bcd60e51b815260206004820152602b60248201527f5175657279206861736820646f6573206e6f74206d617463682074686520726560448201526a71756573746564206f6e6560a81b6064820152608490fd5b81969592611aee829660209495810190611867565b9460e08601916001611b19611b0c611b06865161193b565b51610d90565b546001600160a01b031690565b9351511480611c0a575b611b2c9061196c565b611b4c60405196879586948594630984a41f60e21b8652600486016119c5565b03916001600160a01b03165afa8015611c0557611bcf9560a094611b7f611b8493611bc895600091611bd7575b50611a38565b6116a7565b91611b9760608401518583015114611a79565b611ba783516020830151906122c9565b611bbc60e084019160c0835191015190612129565b51604083015190611ce2565b01516121bb565b6119c261232d565b611bf8915060203d8111611bfe575b611bf0818361070b565b8101906119ad565b38611b79565b503d611be6565b611a2c565b506001600160a01b0383161515611b23565b908160e09103126101b8576040519060e08201908282106001600160401b038311176106d05760c091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a0840152015160c082015290565b15611c8f57565b60405162461bcd60e51b815260206004820152602560248201527f537461746520646f65736e277420657869737420696e20737461746520636f6e6044820152641d1c9858dd60da1b6064820152608490fd5b611d25611d1f83611cfa611cf585611ff3565b611fda565b602081519101519061ffff60f01b918281169160028110611db6575b50509050611e6c565b82141590565b611d2d575050565b6000805160206124b5833981519152546040516329e4398960e11b815260048101839052602481019390935260e090839060449082906001600160a01b03165afa8015611c055761077992600091611d88575b505114611c88565b611da9915060e03d8111611daf575b611da1818361070b565b810190611c1c565b38611d80565b503d611d97565b8391925060020360031b1b1616803880611d16565b15611dd257565b60405162461bcd60e51b815260206004820152602160248201527f436865636b73756d207265717569726573203239206c656e67746820617272616044820152607960f81b6064820152608490fd5b15611e2857565b606460405162461bcd60e51b815260206004820152602060248201527f69644279746573207265717569726573203331206c656e6774682061727261796044820152fd5b90611cf5611e7991611ff3565b908151601a1981018181116114b657611e9e90611e97855191612446565b1115612454565b60405192601b84019101603684015b808310611f7c575050611f59601f611f05611f0a86611ef9611f05611f7798611f6598601b6119c29c5287199788910116928391826040526020830160029161ffff60f01b1681520190565b0386810183528261070b565b6123cd565b91611f18601d845114611dcb565b611f37611f2484611f8f565b60ff61ff008260081b169160081c161790565b60405160f09190911b6001600160f01b03191660208201529384906022820190565b0390810184528361070b565b611f72601f825114611e21565b612106565b611ff3565b9091825181526020809101920190611ead565b90600091611fa0601d825114611dcb565b6000925b8151841015611fd5576020848301015160f81c61ffff809216019081116114b657611fcf90936114a7565b92611fa4565b925050565b9060405191611fe8836106d5565b602083526020830152565b8060081c9060081b907eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff00007fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000007dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0084167cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff84161760101b931691161760101c177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff7fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008260201b169160201c161777ffffffffffffffff0000000000000000ffffffffffffffff80198260401b169160401c16178060801b9060801c1790565b60208151910151906020811061211a575090565b6000199060200360031b1b1690565b8151156121b75760005b8251811015612160576121468184611958565b51821461215b57612156906114a7565b612133565b505050565b60405162461bcd60e51b815260206004820152602960248201527f497373756572206973206e6f74206f6e2074686520416c6c6f776564204973736044820152681d595c9cc81b1a5cdd60ba1b6064820152608490fd5b5050565b6001600160a01b039080821681036122385760146121dc611cf58493611ff3565b015192169116036121e957565b60405162461bcd60e51b815260206004820152602160248201527f4368616c6c656e67652073686f756c64206d61746368207468652073656e64656044820152603960f91b6064820152608490fd5b60405162461bcd60e51b815260206004820152605d60248201527f676976656e2075696e74323536206973206e6f74206120726570726573656e7460448201527f6174696f6e206f6620616e20616464726573732c203132206d6f73742073696760648201527f6e69666963616e742062797465732073686f756c64206265207a65726f000000608482015260a490fd5b9060009015612325575060ff60015b16036122e057565b60405162461bcd60e51b815260206004820152601e60248201527f4d65726b6c697a65642076616c7565206973206e6f7420636f727265637400006044820152606490fd5b60ff906122d8565b604080519061233b826106f0565b600282526000805b8281106123aa5750505061235561076c565b61235d610e7a565b81526001602082015261236f8261193b565b526123798161193b565b5061238261076c565b61238a610fba565b8152600a602082015261239c82611948565b526123a681611948565b5090565b60209083516123b8816106d5565b60608152828481830152828701015201612343565b6040519181518084526020808501918501928184019282808701915b8581106124365750505080518093875182018852940193828086019201905b828110612427575050505090603f91601f199351011501011660405290565b81518152908301908301612408565b82518152918101918491016123e9565b90601b82018092116114b657565b1561245b57565b60405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606490fdfe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930028c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287502f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00a2646970667358221220288db29c5f58ffc9f586defd65c4321c18f58e981c77c8988a65a01f1ed6588b64736f6c63430008140033",
  "deployedBytecode": "0x6080604052600436101561001257600080fd5b60003560e01c806301ffc9a7146101625780631134b4801461015d5780631c4c7fd81461015857806331969e5714610153578063485cc9551461014e57806348d369201461014957806354fd4d5014610103578063652377dc14610144578063715018a61461013f57806379ba50971461013a5780638c752c75146101355780638da5cb5b14610130578063af4c4fd51461012b578063b16a394f14610126578063ba47e32a14610121578063e30c39781461011c578063f177a69e14610117578063f2fde38b14610112578063f718c5861461010d578063fb5af2a2146101085763ffa1ad741461010357600080fd5b61048d565b610bcc565b610abd565b610a36565b610992565b61089a565b61085d565b6107d1565b610662565b61062c565b6105ef565b61059c565b610517565b6104d7565b610405565b6102cb565b610295565b610240565b6101bd565b346101b85760203660031901126101b85760043563ffffffff60e01b81168091036101b85760209063efba202360e01b81149081156101a7575b506040519015158152f35b6301ffc9a760e01b1490503861019c565b600080fd5b346101b85760203660031901126101b8576101d6610e59565b6004357f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750555005b600435906001600160a01b03821682036101b857565b602435906001600160a01b03821682036101b857565b61014435906001600160a01b03821682036101b857565b346101b85760203660031901126101b85761029361025c6101fd565b610264610e59565b6000805160206124b583398151915280546001600160a01b0319166001600160a01b0392909216919091179055565b005b346101b85760003660031901126101b8576000805160206124b5833981519152546040516001600160a01b039091168152602090f35b346101b85760403660031901126101b8576102e46101fd565b6102ec610213565b906000805160206124d583398151915254916001600160401b0360ff8460401c16159316801590816103fd575b60011490816103f3575b1590816103ea575b506103d8576000805160206124d5833981519152805467ffffffffffffffff1916600117905561035f91836103ae57611022565b61036557005b6000805160206124d5833981519152805460ff60401b19169055604051600181527fc7f505b2f371ae2175ee4913f4499e1f2633a7b5936321eed1cdaeb6115181d290602090a1005b6000805160206124d5833981519152805460ff60401b191668010000000000000000179055611022565b60405163f92ee8a960e01b8152600490fd5b9050153861032b565b303b159150610323565b849150610319565b346101b85760203660031901126101b85761041e610e59565b6004357f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750455005b60005b8381106104585750506000910152565b8181015183820152602001610448565b9060209161048181518092818552858086019101610445565b601f01601f1916010190565b346101b85760003660031901126101b8576104d36040516104ad816106d5565b6005815264322e302e3160d81b6020820152604051918291602083526020830190610468565b0390f35b346101b85760203660031901126101b8576104f0610e59565b6004357f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750355005b346101b85760008060031936011261059957610531610e59565b6000805160206124f583398151915280546001600160a01b03199081169091556000805160206124958339815191528054918216905581906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08280a380f35b80fd5b346101b85760003660031901126101b8576000805160206124f583398151915254336001600160a01b03909116036105d75761029333610deb565b60405163118cdaa760e01b8152336004820152602490fd5b346101b85760003660031901126101b85760207f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750554604051908152f35b346101b85760003660031901126101b857600080516020612495833981519152546040516001600160a01b039091168152602090f35b346101b85760003660031901126101b85760207f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750354604051908152f35b634e487b7160e01b600052604160045260246000fd5b602081019081106001600160401b038211176106d057604052565b61069f565b604081019081106001600160401b038211176106d057604052565b606081019081106001600160401b038211176106d057604052565b90601f801991011681019081106001600160401b038211176106d057604052565b6040519061016082018281106001600160401b038211176106d057604052565b6040519061014082018281106001600160401b038211176106d057604052565b60405190610779826106d5565b565b81601f820112156101b8578035906001600160401b0382116106d057604051926107af601f8401601f19166020018561070b565b828452602083830101116101b857816000926020809301838601378301015290565b346101b85760203660031901126101b8576004356001600160401b0381116101b85761080461080991369060040161077b565b610d4b565b54801561082157604051600019919091018152602090f35b60405162461bcd60e51b8152602060048201526014602482015273125b9c1d5d081b985b59481b9bdd08199bdd5b9960621b6044820152606490fd5b346101b85760003660031901126101b85760207f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750454604051908152f35b346101b85760003660031901126101b8576000805160206124f5833981519152546040516001600160a01b039091168152602090f35b9181601f840112156101b8578235916001600160401b0383116101b8576020808501948460051b0101116101b857565b906024916064116101b857565b9060e491610124116101b857565b602080820190808352835180925260409283810182858560051b8401019601946000925b858410610950575050505050505090565b909192939495968580600192603f198582030187528a5190828061097b84518a85528a850190610468565b93015191015299019401940192959493919061093f565b346101b8576101603660031901126101b8576001600160401b036004358181116101b8576109c49036906004016108d0565b906109ce36610900565b923660e4116101b8576109e03661090d565b9161012435928284116101b857366023850112156101b85783600401359283116101b85736602484860101116101b8576104d395610a2a956024610a22610229565b960193611ad9565b6040519182918261091b565b346101b85760203660031901126101b857610a4f6101fd565b610a57610e59565b6000805160206124f583398151915280546001600160a01b0319166001600160a01b03928316908117909155600080516020612495833981519152549091167f38d16b8cac22d99fc7c124b9cd0de2d3fa1faef420bfe791d8c362d765e22700600080a3005b346101b85760203660031901126101b8576004356001600160401b0381116101b857610af9610af36101609236906004016108d0565b906116a7565b60405190805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080820151908301526101408091015190820152f35b602080820190808352835180925260408301928160408460051b8301019501936000915b848310610b9e5750505050505090565b9091929394958480610bbc600193603f198682030187528a51610468565b9801930193019194939290610b8e565b346101b857600080600319360112610599577f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750190815490610c0c82610cfa565b91604091610c1c8351948561070b565b8184529384527fabff3b23bb0cb48bf8af6c9a19292e3671159a93c05f3dc6ba7a90443edecb57938060208086015b848310610c5f578551806104d38982610b6a565b85518285928a5492610c7084610d11565b808252600194808616908115610cde5750600114610ca6575b50610c9881600196038261070b565b815201980192019196610c4b565b8c8952838920955088905b808210610cc75750810183019450610c98610c89565b865483830186015295850195879490910190610cb1565b60ff19168584015250151560051b810183019450610c98610c89565b6001600160401b0381116106d05760051b60200190565b90600182811c92168015610d41575b6020831014610d2b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d20565b6020610d64918160405193828580945193849201610445565b81017f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750681520301902090565b6020610da9918160405193828580945193849201610445565b81017f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750081520301902090565b634e487b7160e01b600052601160045260246000fd5b6000805160206124f583398151915280546001600160a01b031990811690915560008051602061249583398151915280549182166001600160a01b0393841690811790915591167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0600080a3565b600080516020612495833981519152546001600160a01b031633036105d757565b60405190610e87826106d5565b60068252651d5cd95c925160d21b6020830152565b60405190610ea9826106d5565b600f82526e69737375657241757468537461746560881b6020830152565b60405190610ed4826106d5565b60098252681c995c5d595cdd125160ba1b6020830152565b60405190610ef9826106d5565b60098252686368616c6c656e676560b81b6020830152565b60405190610f1e826106d5565b600882526719da5cdd149bdbdd60c21b6020830152565b60405190610f42826106d5565b60088252671a5cdcdd595c925160c21b6020830152565b60405190610f66826106d5565b60138252721a5cd4995d9bd8d85d1a5bdb90da1958dad959606a1b6020830152565b60405190610f95826106d5565b6016825275697373756572436c61696d4e6f6e526576537461746560501b6020830152565b60405190610fc7826106d5565b6009825268074696d657374616d760bc1b6020830152565b60405190610fec826106f0565b60218252603760f91b6040837f63726564656e7469616c41746f6d6963517565727953696756324f6e4368616960208201520152565b90611124916001611053604051611038816106d5565b60098152681b595c9adb1a5e995960ba1b6020820152610d4b565b556002611061610804610e7a565b556003611095604051611073816106d5565b601081526f0c6d2e4c6ead2e8a2eacae4f290c2e6d60831b6020820152610d4b565b556110a66110a1610e9c565b6114bb565b6110b66110b1610ec7565b6114c9565b6110c66110c1610eec565b6114d4565b6110d66110d1610f11565b6114df565b6110e66110e1610f35565b6114ea565b6110f66110f1610f59565b6114f5565b611106611101610f88565b611500565b611116611111610fba565b61150b565b61111e610fdf565b91611257565b61077933611516565b818110611138575050565b6000815560010161112d565b9190601f811161115357505050565b610779926000526020600020906020601f840160051c8301931061117f575b601f0160051c019061112d565b9091508190611172565b91909182516001600160401b0381116106d0576111b0816111aa8454610d11565b84611144565b602080601f83116001146111ec5750819293946000926111e1575b50508160011b916000199060031b1c1916179055565b0151905038806111cb565b90601f1983169561120285600052602060002090565b926000905b88821061123f57505083600195969710611226575b505050811b019055565b015160001960f88460031b161c1916905538808061121c565b80600185968294968601518155019501930190611207565b929192610e10807f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e1828750355807f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287504557f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287505556040516112d1816106b5565b8481527f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287501908154916001928382558084106113e7575b50507f28c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e182875016000527fabff3b23bb0cb48bf8af6c9a19292e3671159a93c05f3dc6ba7a90443edecb57906000905b8382106113cb5750949561112495506001600160a01b039461139c93508516915061137d90610d90565b80546001600160a01b0319166001600160a01b03909216919091179055565b6000805160206124b58339815191528054919092166001600160a01b03166001600160a01b0319909116179055565b836020826113db83945187611189565b01930191019091611353565b60009182527fabff3b23bb0cb48bf8af6c9a19292e3671159a93c05f3dc6ba7a90443edecb570190837fabff3b23bb0cb48bf8af6c9a19292e3671159a93c05f3dc6ba7a90443edecb585b838110611440575050611307565b61144a8154610d11565b80611459575b50018490611432565b601f9083828211600114611474575050508281555b38611450565b6114959261148785600052602060002090565b920160051c8201910161112d565b6000818152602081208183555561146e565b60001981146114b65760010190565b610dd5565b6114c6600491610d4b565b55565b6114c6600591610d4b565b6114c6600691610d4b565b6114c6600791610d4b565b6114c6600891610d4b565b6114c6600991610d4b565b6114c6600a91610d4b565b6114c6600b91610d4b565b61151e611557565b611526611557565b6001600160a01b0381161561153e5761077990610deb565b604051631e4fbdf760e01b815260006004820152602490fd5b60ff6000805160206124d58339815191525460401c161561157457565b604051631afcd79f60e31b8152600490fd5b6040519061016082018281106001600160401b038211176106d057604052816101406000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b634e487b7160e01b600052603260045260246000fd5b90156116095790565b6115ea565b90600110156116095760200190565b90600210156116095760400190565b90600310156116095760600190565b90600410156116095760800190565b90600510156116095760a00190565b90600610156116095760c00190565b90600710156116095760e00190565b9060081015611609576101000190565b9060091015611609576101200190565b90600a1015611609576101400190565b906116b0611586565b506116bb8183611600565b35916116c7828261160e565b35916116d3818361161d565b356116de828461162c565b35906116ea838561163b565b356116f5848661164a565b35906117018587611659565b359261170d8688611668565b359461172f61171c888a611677565b3597611728818b611687565b3599611697565b359861173961072c565b9a8b5260208b015260408a01526060890152608088015260a087015260c086015260e085015261010084015261012083015261014082015290565b81601f820112156101b85780359161178b83610cfa565b92611799604051948561070b565b808452602092838086019260051b8201019283116101b8578301905b8282106117c3575050505090565b813581529083019083016117b5565b9080601f830112156101b8578135906117ea82610cfa565b926117f8604051948561070b565b828452602092838086019160051b830101928084116101b857848301915b8483106118265750505050505090565b82356001600160401b0381116101b85786916118478484809489010161077b565b815201920191611816565b801515036101b857565b359061077982611852565b6020818303126101b85780356001600160401b03918282116101b8570190610140828403126101b85761189861074c565b928235845260208301356020850152604083013560408501526060830135606085015260808301358281116101b857816118d3918501611774565b608085015260a083013560a085015260c08301358281116101b857816118fa918501611774565b60c085015260e08301359182116101b8576119169183016117d2565b60e083015261010061192981830161185c565b90830152610120809101359082015290565b8051156116095760200190565b8051600110156116095760400190565b80518210156116095760209160051b010190565b1561197357565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818da5c98dd5a5d08125160721b6044820152606490fd5b908160209103126101b857516119c281611852565b90565b929391604080928537606460008584015b8460028310611a18575050505060c0840137610120610100830181905282018190526001600160fb1b0381116101b85760051b90816101409384830137010190565b8082818660019537019301910190916119d6565b6040513d6000823e3d90fd5b15611a3f57565b60405162461bcd60e51b8152602060048201526012602482015271141c9bdbd9881a5cc81b9bdd081d985b1a5960721b6044820152606490fd5b15611a8057565b60405162461bcd60e51b815260206004820152602b60248201527f5175657279206861736820646f6573206e6f74206d617463682074686520726560448201526a71756573746564206f6e6560a81b6064820152608490fd5b81969592611aee829660209495810190611867565b9460e08601916001611b19611b0c611b06865161193b565b51610d90565b546001600160a01b031690565b9351511480611c0a575b611b2c9061196c565b611b4c60405196879586948594630984a41f60e21b8652600486016119c5565b03916001600160a01b03165afa8015611c0557611bcf9560a094611b7f611b8493611bc895600091611bd7575b50611a38565b6116a7565b91611b9760608401518583015114611a79565b611ba783516020830151906122c9565b611bbc60e084019160c0835191015190612129565b51604083015190611ce2565b01516121bb565b6119c261232d565b611bf8915060203d8111611bfe575b611bf0818361070b565b8101906119ad565b38611b79565b503d611be6565b611a2c565b506001600160a01b0383161515611b23565b908160e09103126101b8576040519060e08201908282106001600160401b038311176106d05760c091604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a0840152015160c082015290565b15611c8f57565b60405162461bcd60e51b815260206004820152602560248201527f537461746520646f65736e277420657869737420696e20737461746520636f6e6044820152641d1c9858dd60da1b6064820152608490fd5b611d25611d1f83611cfa611cf585611ff3565b611fda565b602081519101519061ffff60f01b918281169160028110611db6575b50509050611e6c565b82141590565b611d2d575050565b6000805160206124b5833981519152546040516329e4398960e11b815260048101839052602481019390935260e090839060449082906001600160a01b03165afa8015611c055761077992600091611d88575b505114611c88565b611da9915060e03d8111611daf575b611da1818361070b565b810190611c1c565b38611d80565b503d611d97565b8391925060020360031b1b1616803880611d16565b15611dd257565b60405162461bcd60e51b815260206004820152602160248201527f436865636b73756d207265717569726573203239206c656e67746820617272616044820152607960f81b6064820152608490fd5b15611e2857565b606460405162461bcd60e51b815260206004820152602060248201527f69644279746573207265717569726573203331206c656e6774682061727261796044820152fd5b90611cf5611e7991611ff3565b908151601a1981018181116114b657611e9e90611e97855191612446565b1115612454565b60405192601b84019101603684015b808310611f7c575050611f59601f611f05611f0a86611ef9611f05611f7798611f6598601b6119c29c5287199788910116928391826040526020830160029161ffff60f01b1681520190565b0386810183528261070b565b6123cd565b91611f18601d845114611dcb565b611f37611f2484611f8f565b60ff61ff008260081b169160081c161790565b60405160f09190911b6001600160f01b03191660208201529384906022820190565b0390810184528361070b565b611f72601f825114611e21565b612106565b611ff3565b9091825181526020809101920190611ead565b90600091611fa0601d825114611dcb565b6000925b8151841015611fd5576020848301015160f81c61ffff809216019081116114b657611fcf90936114a7565b92611fa4565b925050565b9060405191611fe8836106d5565b602083526020830152565b8060081c9060081b907eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff00007fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000007dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0084167cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff84161760101b931691161760101c177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff7fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008260201b169160201c161777ffffffffffffffff0000000000000000ffffffffffffffff80198260401b169160401c16178060801b9060801c1790565b60208151910151906020811061211a575090565b6000199060200360031b1b1690565b8151156121b75760005b8251811015612160576121468184611958565b51821461215b57612156906114a7565b612133565b505050565b60405162461bcd60e51b815260206004820152602960248201527f497373756572206973206e6f74206f6e2074686520416c6c6f776564204973736044820152681d595c9cc81b1a5cdd60ba1b6064820152608490fd5b5050565b6001600160a01b039080821681036122385760146121dc611cf58493611ff3565b015192169116036121e957565b60405162461bcd60e51b815260206004820152602160248201527f4368616c6c656e67652073686f756c64206d61746368207468652073656e64656044820152603960f91b6064820152608490fd5b60405162461bcd60e51b815260206004820152605d60248201527f676976656e2075696e74323536206973206e6f74206120726570726573656e7460448201527f6174696f6e206f6620616e20616464726573732c203132206d6f73742073696760648201527f6e69666963616e742062797465732073686f756c64206265207a65726f000000608482015260a490fd5b9060009015612325575060ff60015b16036122e057565b60405162461bcd60e51b815260206004820152601e60248201527f4d65726b6c697a65642076616c7565206973206e6f7420636f727265637400006044820152606490fd5b60ff906122d8565b604080519061233b826106f0565b600282526000805b8281106123aa5750505061235561076c565b61235d610e7a565b81526001602082015261236f8261193b565b526123798161193b565b5061238261076c565b61238a610fba565b8152600a602082015261239c82611948565b526123a681611948565b5090565b60209083516123b8816106d5565b60608152828481830152828701015201612343565b6040519181518084526020808501918501928184019282808701915b8581106124365750505080518093875182018852940193828086019201905b828110612427575050505090603f91601f199351011501011660405290565b81518152908301908301612408565b82518152918101918491016123e9565b90601b82018092116114b657565b1561245b57565b60405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606490fdfe9016d09d72d40fdae2fd8ceac6b6234c7706214fd39c1cd1e609a0528c19930028c92975a30f1f2f7970a65953987652034d896ba2d3b7a4961ada9e18287502f0c57e16840df040f15088dc2f81fe391c3923bec73e23a9662efc9c229c6a00237e158222e3e6968b72b9db0d8043aacf074ad9f650f0d1606b4d82ee432c00a2646970667358221220288db29c5f58ffc9f586defd65c4321c18f58e981c77c8988a65a01f1ed6588b64736f6c63430008140033",
  "devdoc": {
    "errors": {
      "InvalidInitialization()": [
        {
          "details": "The contract is already initialized."
        }
      ],
      "NotInitializing()": [
        {
          "details": "The contract is not initializing."
        }
      ],
      "OwnableInvalidOwner(address)": [
        {
          "details": "The owner is not a valid owner account. (eg. `address(0)`)"
        }
      ],
      "OwnableUnauthorizedAccount(address)": [
        {
          "details": "The caller account is not authorized to perform an operation."
        }
      ]
    },
    "events": {
      "Initialized(uint64)": {
        "details": "Triggered when the contract has been initialized or reinitialized."
      }
    },
    "kind": "dev",
    "methods": {
      "acceptOwnership()": {
        "details": "The new owner accepts the ownership transfer."
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingOwner()": {
        "details": "Returns the address of the pending owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "supportsInterface(bytes4)": {
        "details": "See {IERC165-supportsInterface}."
      },
      "transferOwnership(address)": {
        "details": "Starts the ownership transfer of the contract to a new account. Replaces the pending transfer if there is one. Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Version of contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [],
    "types": null
  }
}