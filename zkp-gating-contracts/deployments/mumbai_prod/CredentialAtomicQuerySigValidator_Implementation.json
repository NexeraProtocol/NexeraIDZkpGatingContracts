{
  "address": "0x8801cE2b4C3A4D500f1599547CAe90AFf229Acea",
  "abi": [
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint8",
          "name": "version",
          "type": "uint8"
        }
      ],
      "name": "Initialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "inputs": [],
      "name": "VERSION",
      "outputs": [
        {
          "internalType": "string",
          "name": "",
          "type": "string"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "getSupportedCircuitIds",
      "outputs": [
        {
          "internalType": "string[]",
          "name": "ids",
          "type": "string[]"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "gistRootExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "_verifierContractAddr",
          "type": "address"
        },
        {
          "internalType": "address",
          "name": "_stateContractAddr",
          "type": "address"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "string",
          "name": "name",
          "type": "string"
        }
      ],
      "name": "inputIndexOf",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        }
      ],
      "name": "parseCommonPubSignals",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "merklized",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "userID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerState",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "circuitQueryHash",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "requestID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "challenge",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "gistRoot",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerID",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "isRevocationChecked",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "issuerClaimNonRevState",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "timestamp",
              "type": "uint256"
            }
          ],
          "internalType": "struct CredentialAtomicQueryValidator.CommonPubSignals",
          "name": "",
          "type": "tuple"
        }
      ],
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "proofExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "revocationStateExpirationTimeout",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setGISTRootExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setProofExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "expirationTimeout",
          "type": "uint256"
        }
      ],
      "name": "setRevocationStateExpirationTimeout",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "stateContractAddr",
          "type": "address"
        }
      ],
      "name": "setStateAddress",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "state",
      "outputs": [
        {
          "internalType": "contract IState",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "inputs",
          "type": "uint256[]"
        },
        {
          "internalType": "uint256[2]",
          "name": "a",
          "type": "uint256[2]"
        },
        {
          "internalType": "uint256[2][2]",
          "name": "b",
          "type": "uint256[2][2]"
        },
        {
          "internalType": "uint256[2]",
          "name": "c",
          "type": "uint256[2]"
        },
        {
          "internalType": "bytes",
          "name": "data",
          "type": "bytes"
        }
      ],
      "name": "verify",
      "outputs": [],
      "stateMutability": "view",
      "type": "function"
    }
  ],
  "transactionHash": "0x2b65bc76b55fcd258d8aae107b6b74573cc93addaae8540a4f9e923fbffc3b29",
  "receipt": {
    "to": null,
    "from": "0x0BAd9DaD98143b2E946e8A40E4f27537be2f55E2",
    "contractAddress": "0x8801cE2b4C3A4D500f1599547CAe90AFf229Acea",
    "transactionIndex": 5,
    "gasUsed": "1840030",
    "logsBloom": "0x
    "blockHash": "0x3db4e0974eded1f57f36ac51d63cdb998957d99e7e8b1bf48ba433a70d7273e8",
    "transactionHash": "0x2b65bc76b55fcd258d8aae107b6b74573cc93addaae8540a4f9e923fbffc3b29",
    "logs": [
      {
        "transactionIndex": 5,
        "blockNumber": 47586595,
        "transactionHash": "0x2b65bc76b55fcd258d8aae107b6b74573cc93addaae8540a4f9e923fbffc3b29",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000000bad9dad98143b2e946e8a40e4f27537be2f55e2",
          "0x000000000000000000000000c275dc8be39f50d12f66b6a63629c39da5bae5bd"
        ],
        "data": "0x000000000000000000000000000000000000000000000000000bc44baa79d6da0000000000000000000000000000000000000000000000004dc6098f1783542d0000000000000000000000000000000000000000000014d0827e48317dbdf7a10000000000000000000000000000000000000000000000004dba45436d097d530000000000000000000000000000000000000000000014d0828a0c7d2837ce7b",
        "logIndex": 23,
        "blockHash": "0x3db4e0974eded1f57f36ac51d63cdb998957d99e7e8b1bf48ba433a70d7273e8"
      }
    ],
    "blockNumber": 47586595,
    "cumulativeGasUsed": "3109354",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "numDeployments": 1,
  "solcInputHash": "8b4b580e2fa4b1a7d5ea5c701fbe60fd",
  "metadata": "{\"compiler\":{\"version\":\"0.8.16+commit.07a7930e\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint8\",\"name\":\"version\",\"type\":\"uint8\"}],\"name\":\"Initialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"inputs\":[],\"name\":\"VERSION\",\"outputs\":[{\"internalType\":\"string\",\"name\":\"\",\"type\":\"string\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"getSupportedCircuitIds\",\"outputs\":[{\"internalType\":\"string[]\",\"name\":\"ids\",\"type\":\"string[]\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"gistRootExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"_verifierContractAddr\",\"type\":\"address\"},{\"internalType\":\"address\",\"name\":\"_stateContractAddr\",\"type\":\"address\"}],\"name\":\"initialize\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"string\",\"name\":\"name\",\"type\":\"string\"}],\"name\":\"inputIndexOf\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"}],\"name\":\"parseCommonPubSignals\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"merklized\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"userID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"circuitQueryHash\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"requestID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"challenge\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"gistRoot\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerID\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"isRevocationChecked\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"issuerClaimNonRevState\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"timestamp\",\"type\":\"uint256\"}],\"internalType\":\"struct CredentialAtomicQueryValidator.CommonPubSignals\",\"name\":\"\",\"type\":\"tuple\"}],\"stateMutability\":\"pure\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"proofExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"revocationStateExpirationTimeout\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setGISTRootExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setProofExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"expirationTimeout\",\"type\":\"uint256\"}],\"name\":\"setRevocationStateExpirationTimeout\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"stateContractAddr\",\"type\":\"address\"}],\"name\":\"setStateAddress\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"state\",\"outputs\":[{\"internalType\":\"contract IState\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"inputs\",\"type\":\"uint256[]\"},{\"internalType\":\"uint256[2]\",\"name\":\"a\",\"type\":\"uint256[2]\"},{\"internalType\":\"uint256[2][2]\",\"name\":\"b\",\"type\":\"uint256[2][2]\"},{\"internalType\":\"uint256[2]\",\"name\":\"c\",\"type\":\"uint256[2]\"},{\"internalType\":\"bytes\",\"name\":\"data\",\"type\":\"bytes\"}],\"name\":\"verify\",\"outputs\":[],\"stateMutability\":\"view\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner.\"},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"}},\"stateVariables\":{\"VERSION\":{\"details\":\"Version of contract\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/validators/CredentialAtomicQuerySigValidator.sol\":\"CredentialAtomicQuerySigValidator\"},\"evmVersion\":\"london\",\"libraries\":{},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[],\"viaIR\":true},\"sources\":{\"@iden3/contracts/interfaces/ICircuitValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\ninterface ICircuitValidator {\\n    function verify(\\n        uint256[] memory inputs,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c,\\n        bytes calldata data\\n    ) external view;\\n\\n    function getSupportedCircuitIds() external view returns (string[] memory ids);\\n\\n    function inputIndexOf(string memory name) external view returns (uint256);\\n}\\n\",\"keccak256\":\"0xe18f12a89113f38d6c91a01303d80cc6fc46815e7bf511ce6343b5d13ab5a03e\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/interfaces/IState.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nuint256 constant MAX_SMT_DEPTH = 64;\\n\\ninterface IState {\\n    /**\\n     * @dev Struct for public interfaces to represent a state information.\\n     * @param id An identity.\\n     * @param state A state.\\n     * @param replacedByState A state, which replaced this state for the identity.\\n     * @param createdAtTimestamp A time when the state was created.\\n     * @param replacedAtTimestamp A time when the state was replaced by the next identity state.\\n     * @param createdAtBlock A block number when the state was created.\\n     * @param replacedAtBlock A block number when the state was replaced by the next identity state.\\n     */\\n    struct StateInfo {\\n        uint256 id;\\n        uint256 state;\\n        uint256 replacedByState;\\n        uint256 createdAtTimestamp;\\n        uint256 replacedAtTimestamp;\\n        uint256 createdAtBlock;\\n        uint256 replacedAtBlock;\\n    }\\n\\n    /**\\n     * @dev Struct for public interfaces to represent GIST root information.\\n     * @param root This GIST root.\\n     * @param replacedByRoot A root, which replaced this root.\\n     * @param createdAtTimestamp A time, when the root was saved to blockchain.\\n     * @param replacedAtTimestamp A time, when the root was replaced by the next root in blockchain.\\n     * @param createdAtBlock A number of block, when the root was saved to blockchain.\\n     * @param replacedAtBlock A number of block, when the root was replaced by the next root in blockchain.\\n     */\\n    struct GistRootInfo {\\n        uint256 root;\\n        uint256 replacedByRoot;\\n        uint256 createdAtTimestamp;\\n        uint256 replacedAtTimestamp;\\n        uint256 createdAtBlock;\\n        uint256 replacedAtBlock;\\n    }\\n\\n    /**\\n     * @dev Struct for public interfaces to represent GIST proof information.\\n     * @param root This GIST root.\\n     * @param existence A flag, which shows if the leaf index exists in the GIST.\\n     * @param siblings An array of GIST sibling node hashes.\\n     * @param index An index of the leaf in the GIST.\\n     * @param value A value of the leaf in the GIST.\\n     * @param auxExistence A flag, which shows if the auxiliary leaf exists in the GIST.\\n     * @param auxIndex An index of the auxiliary leaf in the GIST.\\n     * @param auxValue An value of the auxiliary leaf in the GIST.\\n     */\\n    struct GistProof {\\n        uint256 root;\\n        bool existence;\\n        uint256[MAX_SMT_DEPTH] siblings;\\n        uint256 index;\\n        uint256 value;\\n        bool auxExistence;\\n        uint256 auxIndex;\\n        uint256 auxValue;\\n    }\\n\\n    /**\\n     * @dev Retrieve last state information of specific id.\\n     * @param id An identity.\\n     * @return The state info.\\n     */\\n    function getStateInfoById(uint256 id) external view returns (StateInfo memory);\\n\\n    /**\\n     * @dev Retrieve state information by id and state.\\n     * @param id An identity.\\n     * @param state A state.\\n     * @return The state info.\\n     */\\n    function getStateInfoByIdAndState(\\n        uint256 id,\\n        uint256 state\\n    ) external view returns (StateInfo memory);\\n\\n    /**\\n     * @dev Retrieve the specific GIST root information.\\n     * @param root GIST root.\\n     * @return The GIST root info.\\n     */\\n    function getGISTRootInfo(uint256 root) external view returns (GistRootInfo memory);\\n\\n    /**\\n     * @dev Get defaultIdType\\n     * @return defaultIdType\\n     */\\n    function getDefaultIdType() external view returns (bytes2);\\n\\n    /**\\n     * @dev Performs state transition\\n     * @param id Identifier of the identity\\n     * @param oldState Previous state of the identity\\n     * @param newState New state of the identity\\n     * @param isOldStateGenesis Flag if previous identity state is genesis\\n     * @param a Proof.A\\n     * @param b Proof.B\\n     * @param c Proof.C\\n     */\\n    function transitState(\\n        uint256 id,\\n        uint256 oldState,\\n        uint256 newState,\\n        bool isOldStateGenesis,\\n        uint256[2] memory a,\\n        uint256[2][2] memory b,\\n        uint256[2] memory c\\n    ) external;\\n\\n    /**\\n     * @dev Performs state transition\\n     * @param id Identity\\n     * @param oldState Previous identity state\\n     * @param newState New identity state\\n     * @param isOldStateGenesis Is the previous state genesis?\\n     * @param methodId State transition method id\\n     * @param methodParams State transition method-specific params\\n     */\\n    function transitStateGeneric(\\n        uint256 id,\\n        uint256 oldState,\\n        uint256 newState,\\n        bool isOldStateGenesis,\\n        uint256 methodId,\\n        bytes calldata methodParams\\n    ) external;\\n\\n    /**\\n     * @dev Check if identity exists.\\n     * @param id Identity\\n     * @return True if the identity exists\\n     */\\n    function idExists(uint256 id) external view returns (bool);\\n\\n    /**\\n     * @dev Check if state exists.\\n     * @param id Identity\\n     * @param state State\\n     * @return True if the state exists\\n     */\\n    function stateExists(uint256 id, uint256 state) external view returns (bool);\\n}\\n\",\"keccak256\":\"0x05b4722a916a6a28cd6fb0f70deb462b26cbbd04c860d7a32ce5f445954c7316\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/interfaces/IVerifier.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\ninterface IVerifier {\\n    function verify(\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        uint256[] calldata input\\n    ) external view returns (bool r);\\n}\\n\",\"keccak256\":\"0x1c41773a921bc96e857679d6f42fa50c3d36ddd381afc80dc428df476dde4815\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/GenesisUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {PrimitiveTypeUtils} from \\\"./PrimitiveTypeUtils.sol\\\";\\n\\nlibrary GenesisUtils {\\n    /**\\n     *   @dev sum\\n     */\\n    function sum(bytes memory array) internal pure returns (uint16 s) {\\n        require(array.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        for (uint256 i = 0; i < array.length; ++i) {\\n            s += uint16(uint8(array[i]));\\n        }\\n    }\\n\\n    /**\\n     * @dev isGenesisState\\n     */\\n    function isGenesisState(uint256 id, uint256 idState) internal pure returns (bool) {\\n        bytes2 idType = bytes2(\\n            PrimitiveTypeUtils.uint256ToBytes(PrimitiveTypeUtils.reverseUint256(id))\\n        );\\n        uint256 computedId = calcIdFromGenesisState(idType, idState);\\n        return id == computedId;\\n    }\\n\\n    /**\\n     * @dev calcIdFromGenesisState\\n     */\\n    function calcIdFromGenesisState(\\n        bytes2 idType,\\n        uint256 idState\\n    ) internal pure returns (uint256) {\\n        bytes memory userStateB1 = PrimitiveTypeUtils.uint256ToBytes(\\n            PrimitiveTypeUtils.reverseUint256(idState)\\n        );\\n\\n        bytes memory cutState = PrimitiveTypeUtils.slice(userStateB1, userStateB1.length - 27, 27);\\n\\n        bytes memory beforeChecksum = PrimitiveTypeUtils.concat(abi.encodePacked(idType), cutState);\\n        require(beforeChecksum.length == 29, \\\"Checksum requires 29 length array\\\");\\n\\n        uint16 checksum = PrimitiveTypeUtils.reverseUint16(sum(beforeChecksum));\\n\\n        bytes memory checkSumBytes = abi.encodePacked(checksum);\\n\\n        bytes memory idBytes = PrimitiveTypeUtils.concat(beforeChecksum, checkSumBytes);\\n        require(idBytes.length == 31, \\\"idBytes requires 31 length array\\\");\\n\\n        return PrimitiveTypeUtils.reverseUint256(PrimitiveTypeUtils.toUint256(idBytes));\\n    }\\n\\n    /**\\n     * @dev calcIdFromEthAddress\\n     */\\n    function calcIdFromEthAddress(bytes2 idType, address caller) internal pure returns (uint256) {\\n        uint256 addr = PrimitiveTypeUtils.addressToUint256(caller);\\n\\n        return calcIdFromGenesisState(idType, PrimitiveTypeUtils.reverseUint256(addr));\\n    }\\n}\\n\",\"keccak256\":\"0xfd962d67aec0ebae3192bff78df85b5eccd6391abd4e0474343bfb1fb9a4a241\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/Poseidon.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nlibrary PoseidonUnit1L {\\n    function poseidon(uint256[1] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit2L {\\n    function poseidon(uint256[2] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit3L {\\n    function poseidon(uint256[3] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit4L {\\n    function poseidon(uint256[4] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit5L {\\n    function poseidon(uint256[5] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary PoseidonUnit6L {\\n    function poseidon(uint256[6] calldata) public pure returns (uint256) {}\\n}\\n\\nlibrary SpongePoseidon {\\n    uint32 internal constant BATCH_SIZE = 6;\\n\\n    function hash(uint256[] calldata values) public pure returns (uint256) {\\n        uint256[BATCH_SIZE] memory frame = [uint256(0), 0, 0, 0, 0, 0];\\n        bool dirty = false;\\n        uint256 fullHash = 0;\\n        uint32 k = 0;\\n        for (uint32 i = 0; i < values.length; i++) {\\n            dirty = true;\\n            frame[k] = values[i];\\n            if (k == BATCH_SIZE - 1) {\\n                fullHash = PoseidonUnit6L.poseidon(frame);\\n                dirty = false;\\n                frame = [uint256(0), 0, 0, 0, 0, 0];\\n                frame[0] = fullHash;\\n                k = 1;\\n            } else {\\n                k++;\\n            }\\n        }\\n        if (dirty) {\\n            // we haven't hashed something in the main sponge loop and need to do hash here\\n            fullHash = PoseidonUnit6L.poseidon(frame);\\n        }\\n        return fullHash;\\n    }\\n}\\n\\nlibrary PoseidonFacade {\\n    function poseidon1(uint256[1] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit1L.poseidon(el);\\n    }\\n\\n    function poseidon2(uint256[2] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit2L.poseidon(el);\\n    }\\n\\n    function poseidon3(uint256[3] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit3L.poseidon(el);\\n    }\\n\\n    function poseidon4(uint256[4] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit4L.poseidon(el);\\n    }\\n\\n    function poseidon5(uint256[5] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit5L.poseidon(el);\\n    }\\n\\n    function poseidon6(uint256[6] calldata el) public pure returns (uint256) {\\n        return PoseidonUnit6L.poseidon(el);\\n    }\\n\\n    function poseidonSponge(uint256[] calldata el) public pure returns (uint256) {\\n        return SpongePoseidon.hash(el);\\n    }\\n}\\n\",\"keccak256\":\"0xeea65c065f228877cfc5e652ce33b86b9dc991191b0a9d49c92fd2afb0607849\",\"license\":\"GPL-3.0\"},\"@iden3/contracts/lib/PrimitiveTypeUtils.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity 0.8.16;\\n\\nimport {BytesLib} from \\\"solidity-bytes-utils/contracts/BytesLib.sol\\\";\\n\\nlibrary PrimitiveTypeUtils {\\n    /**\\n     * @dev uint256ToBytes\\n     */\\n    function uint256ToBytes(uint256 x) internal pure returns (bytes memory b) {\\n        b = new bytes(32);\\n        assembly {\\n            mstore(add(b, 32), x)\\n        }\\n    }\\n\\n    /**\\n     * @dev reverse uint256\\n     */\\n    function reverseUint256(uint256 input) internal pure returns (uint256 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v =\\n            ((v & 0xFF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00) >> 8) |\\n            ((v & 0x00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v =\\n            ((v & 0xFFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000) >> 16) |\\n            ((v & 0x0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF0000FFFF) << 16);\\n\\n        // swap 4-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000) >> 32) |\\n            ((v & 0x00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF00000000FFFFFFFF) << 32);\\n\\n        // swap 8-byte long pairs\\n        v =\\n            ((v & 0xFFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF0000000000000000) >> 64) |\\n            ((v & 0x0000000000000000FFFFFFFFFFFFFFFF0000000000000000FFFFFFFFFFFFFFFF) << 64);\\n\\n        // swap 16-byte long pairs\\n        v = (v >> 128) | (v << 128);\\n    }\\n\\n    /**\\n     * @dev reverse uint16\\n     */\\n    function reverseUint16(uint16 input) internal pure returns (uint16 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = (v >> 8) | (v << 8);\\n    }\\n\\n    /**\\n     * @dev reverse uint32\\n     */\\n    function reverseUint32(uint32 input) internal pure returns (uint32 v) {\\n        v = input;\\n\\n        // swap bytes\\n        v = ((v & 0xFF00FF00) >> 8) | ((v & 0x00FF00FF) << 8);\\n\\n        // swap 2-byte long pairs\\n        v = (v >> 16) | (v << 16);\\n    }\\n\\n    /**\\n     * @dev compareStrings\\n     */\\n    function compareStrings(string memory a, string memory b) internal pure returns (bool) {\\n        if (bytes(a).length != bytes(b).length) {\\n            return false;\\n        }\\n        return (keccak256(abi.encodePacked((a))) == keccak256(abi.encodePacked((b))));\\n    }\\n\\n    /**\\n     * @dev toUint256\\n     */\\n    function toUint256(bytes memory bys) internal pure returns (uint256 value) {\\n        assembly {\\n            value := mload(add(bys, 0x20))\\n        }\\n    }\\n\\n    /**\\n     * @dev bytesToAddress\\n     */\\n    function bytesToAddress(bytes memory bys) internal pure returns (address addr) {\\n        assembly {\\n            addr := mload(add(bys, 20))\\n        }\\n    }\\n\\n    /**\\n     * @dev int256ToAddress\\n     */\\n    function int256ToAddress(uint256 input) internal pure returns (address) {\\n        return bytesToAddress(uint256ToBytes(reverseUint256(input)));\\n    }\\n\\n    /**\\n     * @dev concat\\n     */\\n    function concat(\\n        bytes memory preBytes,\\n        bytes memory postBytes\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.concat(preBytes, postBytes);\\n    }\\n\\n    /**\\n     * @dev slice\\n     */\\n    function slice(\\n        bytes memory bys,\\n        uint256 start,\\n        uint256 length\\n    ) internal pure returns (bytes memory) {\\n        return BytesLib.slice(bys, start, length);\\n    }\\n\\n    /**\\n     * @dev addressToUint256\\n     */\\n    function addressToUint256(address _addr) internal pure returns (uint256) {\\n        return uint256(uint160(_addr));\\n    }\\n}\\n\",\"keccak256\":\"0x088d813467bacb9d496a69c3ff266df023030d15c07b4c31c749b50bbc7176c6\",\"license\":\"GPL-3.0\"},\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (access/Ownable.sol)\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../utils/ContextUpgradeable.sol\\\";\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract OwnableUpgradeable is Initializable, ContextUpgradeable {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    function __Ownable_init() internal onlyInitializing {\\n        __Ownable_init_unchained();\\n    }\\n\\n    function __Ownable_init_unchained() internal onlyInitializing {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        _checkOwner();\\n        _;\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if the sender is not the owner.\\n     */\\n    function _checkOwner() internal view virtual {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby disabling any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[49] private __gap;\\n}\\n\",\"keccak256\":\"0x359a1ab89b46b9aba7bcad3fb651924baf4893d15153049b9976b0fc9be1358e\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/proxy/utils/Initializable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (proxy/utils/Initializable.sol)\\n\\npragma solidity ^0.8.2;\\n\\nimport \\\"../../utils/AddressUpgradeable.sol\\\";\\n\\n/**\\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\\n * behind a proxy. Since proxied contracts do not make use of a constructor, it's common to move constructor logic to an\\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\\n *\\n * The initialization functions use a version number. Once a version number is used, it is consumed and cannot be\\n * reused. This mechanism prevents re-execution of each \\\"step\\\" but allows the creation of new initialization steps in\\n * case an upgrade adds a module that needs to be initialized.\\n *\\n * For example:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```solidity\\n * contract MyToken is ERC20Upgradeable {\\n *     function initialize() initializer public {\\n *         __ERC20_init(\\\"MyToken\\\", \\\"MTK\\\");\\n *     }\\n * }\\n *\\n * contract MyTokenV2 is MyToken, ERC20PermitUpgradeable {\\n *     function initializeV2() reinitializer(2) public {\\n *         __ERC20Permit_init(\\\"MyToken\\\");\\n *     }\\n * }\\n * ```\\n *\\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\\n *\\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\\n *\\n * [CAUTION]\\n * ====\\n * Avoid leaving a contract uninitialized.\\n *\\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\\n * contract, which may impact the proxy. To prevent the implementation contract from being used, you should invoke\\n * the {_disableInitializers} function in the constructor to automatically lock it when it is deployed:\\n *\\n * [.hljs-theme-light.nopadding]\\n * ```\\n * /// @custom:oz-upgrades-unsafe-allow constructor\\n * constructor() {\\n *     _disableInitializers();\\n * }\\n * ```\\n * ====\\n */\\nabstract contract Initializable {\\n    /**\\n     * @dev Indicates that the contract has been initialized.\\n     * @custom:oz-retyped-from bool\\n     */\\n    uint8 private _initialized;\\n\\n    /**\\n     * @dev Indicates that the contract is in the process of being initialized.\\n     */\\n    bool private _initializing;\\n\\n    /**\\n     * @dev Triggered when the contract has been initialized or reinitialized.\\n     */\\n    event Initialized(uint8 version);\\n\\n    /**\\n     * @dev A modifier that defines a protected initializer function that can be invoked at most once. In its scope,\\n     * `onlyInitializing` functions can be used to initialize parent contracts.\\n     *\\n     * Similar to `reinitializer(1)`, except that functions marked with `initializer` can be nested in the context of a\\n     * constructor.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier initializer() {\\n        bool isTopLevelCall = !_initializing;\\n        require(\\n            (isTopLevelCall && _initialized < 1) || (!AddressUpgradeable.isContract(address(this)) && _initialized == 1),\\n            \\\"Initializable: contract is already initialized\\\"\\n        );\\n        _initialized = 1;\\n        if (isTopLevelCall) {\\n            _initializing = true;\\n        }\\n        _;\\n        if (isTopLevelCall) {\\n            _initializing = false;\\n            emit Initialized(1);\\n        }\\n    }\\n\\n    /**\\n     * @dev A modifier that defines a protected reinitializer function that can be invoked at most once, and only if the\\n     * contract hasn't been initialized to a greater version before. In its scope, `onlyInitializing` functions can be\\n     * used to initialize parent contracts.\\n     *\\n     * A reinitializer may be used after the original initialization step. This is essential to configure modules that\\n     * are added through upgrades and that require initialization.\\n     *\\n     * When `version` is 1, this modifier is similar to `initializer`, except that functions marked with `reinitializer`\\n     * cannot be nested. If one is invoked in the context of another, execution will revert.\\n     *\\n     * Note that versions can jump in increments greater than 1; this implies that if multiple reinitializers coexist in\\n     * a contract, executing them in the right order is up to the developer or operator.\\n     *\\n     * WARNING: setting the version to 255 will prevent any future reinitialization.\\n     *\\n     * Emits an {Initialized} event.\\n     */\\n    modifier reinitializer(uint8 version) {\\n        require(!_initializing && _initialized < version, \\\"Initializable: contract is already initialized\\\");\\n        _initialized = version;\\n        _initializing = true;\\n        _;\\n        _initializing = false;\\n        emit Initialized(version);\\n    }\\n\\n    /**\\n     * @dev Modifier to protect an initialization function so that it can only be invoked by functions with the\\n     * {initializer} and {reinitializer} modifiers, directly or indirectly.\\n     */\\n    modifier onlyInitializing() {\\n        require(_initializing, \\\"Initializable: contract is not initializing\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Locks the contract, preventing any future reinitialization. This cannot be part of an initializer call.\\n     * Calling this in the constructor of a contract will prevent that contract from being initialized or reinitialized\\n     * to any version. It is recommended to use this to lock implementation contracts that are designed to be called\\n     * through proxies.\\n     *\\n     * Emits an {Initialized} event the first time it is successfully executed.\\n     */\\n    function _disableInitializers() internal virtual {\\n        require(!_initializing, \\\"Initializable: contract is initializing\\\");\\n        if (_initialized != type(uint8).max) {\\n            _initialized = type(uint8).max;\\n            emit Initialized(type(uint8).max);\\n        }\\n    }\\n\\n    /**\\n     * @dev Returns the highest version that has been initialized. See {reinitializer}.\\n     */\\n    function _getInitializedVersion() internal view returns (uint8) {\\n        return _initialized;\\n    }\\n\\n    /**\\n     * @dev Returns `true` if the contract is currently initializing. See {onlyInitializing}.\\n     */\\n    function _isInitializing() internal view returns (bool) {\\n        return _initializing;\\n    }\\n}\\n\",\"keccak256\":\"0x89be10e757d242e9b18d5a32c9fbe2019f6d63052bbe46397a430a1d60d7f794\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/AddressUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.0) (utils/Address.sol)\\n\\npragma solidity ^0.8.1;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary AddressUpgradeable {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     *\\n     * Furthermore, `isContract` will also return true if the target contract within\\n     * the same transaction is already scheduled for destruction by `SELFDESTRUCT`,\\n     * which only has an effect at the end of a transaction.\\n     * ====\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * You shouldn't rely on `isContract` to protect against flash loan attacks!\\n     *\\n     * Preventing calls from contracts is highly discouraged. It breaks composability, breaks support for smart wallets\\n     * like Gnosis Safe, and does not provide security since it can be circumvented by calling from a contract\\n     * constructor.\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize/address.code.length, which returns 0\\n        // for contracts in construction, since the code is only stored at the end\\n        // of the constructor execution.\\n\\n        return account.code.length > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://consensys.net/diligence/blog/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.8.0/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(address target, bytes memory data, uint256 value) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResultFromTarget(target, success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call to smart-contract was successful, and revert (either by bubbling\\n     * the revert reason or using the provided one) in case of unsuccessful call or if target was not a contract.\\n     *\\n     * _Available since v4.8._\\n     */\\n    function verifyCallResultFromTarget(\\n        address target,\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        if (success) {\\n            if (returndata.length == 0) {\\n                // only check isContract if the call was successful and the return data is empty\\n                // otherwise we already know that it was a contract\\n                require(isContract(target), \\\"Address: call to non-contract\\\");\\n            }\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    /**\\n     * @dev Tool to verify that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason or using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            _revert(returndata, errorMessage);\\n        }\\n    }\\n\\n    function _revert(bytes memory returndata, string memory errorMessage) private pure {\\n        // Look for revert reason and bubble it up if present\\n        if (returndata.length > 0) {\\n            // The easiest way to bubble the revert reason is using memory via assembly\\n            /// @solidity memory-safe-assembly\\n            assembly {\\n                let returndata_size := mload(returndata)\\n                revert(add(32, returndata), returndata_size)\\n            }\\n        } else {\\n            revert(errorMessage);\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9c80f545915582e63fe206c6ce27cbe85a86fc10b9cd2a0e8c9488fb7c2ee422\",\"license\":\"MIT\"},\"@openzeppelin/contracts-upgradeable/utils/ContextUpgradeable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n// OpenZeppelin Contracts (last updated v4.9.4) (utils/Context.sol)\\n\\npragma solidity ^0.8.0;\\nimport {Initializable} from \\\"../proxy/utils/Initializable.sol\\\";\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract ContextUpgradeable is Initializable {\\n    function __Context_init() internal onlyInitializing {\\n    }\\n\\n    function __Context_init_unchained() internal onlyInitializing {\\n    }\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n\\n    function _contextSuffixLength() internal view virtual returns (uint256) {\\n        return 0;\\n    }\\n\\n    /**\\n     * @dev This empty reserved space is put in place to allow future versions to add new\\n     * variables without shifting down storage in the inheritance chain.\\n     * See https://docs.openzeppelin.com/contracts/4.x/upgradeable#storage_gaps\\n     */\\n    uint256[50] private __gap;\\n}\\n\",\"keccak256\":\"0x75097e35253e7fb282ee4d7f27a80eaacfa759923185bf17302a89cbc059c5ef\",\"license\":\"MIT\"},\"contracts/validators/CredentialAtomicQuerySigValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport {CredentialAtomicQueryValidator} from \\\"./CredentialAtomicQueryValidator.sol\\\";\\nimport {IVerifier} from \\\"@iden3/contracts/interfaces/IVerifier.sol\\\";\\n\\ncontract CredentialAtomicQuerySigValidator is CredentialAtomicQueryValidator {\\n    /**\\n     * @dev Version of contract\\n     */\\n    string public constant VERSION = \\\"1.0.1\\\";\\n\\n    string internal constant CIRCUIT_ID = \\\"credentialAtomicQuerySigV2OnChain\\\";\\n\\n    // This empty reserved space is put in place to allow future versions\\n    // of the CredentialAtomicQuerySigValidator contract to inherit from other contracts without a risk of\\n    // breaking the storage layout. This is necessary because the parent contracts in the\\n    // future may introduce some storage variables, which are placed before the CredentialAtomicQuerySigValidator\\n    // contract's storage variables.\\n    // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n    // slither-disable-next-line shadowing-state\\n    // slither-disable-next-line unused-state\\n    uint256[500] private __gap_before;\\n\\n    // PUT NEW STATE VARIABLES HERE\\n\\n    // This empty reserved space is put in place to allow future versions\\n    // of this contract to add new variables without shifting down\\n    // storage of child contracts that use this contract as a base\\n    // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n    uint256[50] __gap_after;\\n\\n    function initialize(\\n        address _verifierContractAddr,\\n        address _stateContractAddr\\n    ) public override initializer {\\n        _setInputToIndex(\\\"merklized\\\", 0);\\n        _setInputToIndex(\\\"userID\\\", 1);\\n        _setInputToIndex(\\\"circuitQueryHash\\\", 2);\\n        _setInputToIndex(\\\"issuerAuthState\\\", 3);\\n        _setInputToIndex(\\\"requestID\\\", 4);\\n        _setInputToIndex(\\\"challenge\\\", 5);\\n        _setInputToIndex(\\\"gistRoot\\\", 6);\\n        _setInputToIndex(\\\"issuerID\\\", 7);\\n        _setInputToIndex(\\\"isRevocationChecked\\\", 8);\\n        _setInputToIndex(\\\"issuerClaimNonRevState\\\", 9);\\n        _setInputToIndex(\\\"timestamp\\\", 10);\\n        _supportedCircuitIds = [CIRCUIT_ID];\\n        _circuitIdToVerifier[CIRCUIT_ID] = IVerifier(_verifierContractAddr);\\n        super.initialize(_verifierContractAddr, _stateContractAddr);\\n    }\\n\\n    function verify(\\n        uint256[] calldata inputs,\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        bytes calldata data\\n    ) external view virtual {\\n        _verify(inputs, a, b, c, data);\\n    }\\n\\n    function parseCommonPubSignals(\\n        uint256[] calldata inputs\\n    ) public pure override returns (CommonPubSignals memory) {\\n        CommonPubSignals memory params = CommonPubSignals({\\n            merklized: inputs[0],\\n            userID: inputs[1],\\n            circuitQueryHash: inputs[2],\\n            issuerState: inputs[3],\\n            requestID: inputs[4],\\n            challenge: inputs[5],\\n            gistRoot: inputs[6],\\n            issuerID: inputs[7],\\n            isRevocationChecked: inputs[8],\\n            issuerClaimNonRevState: inputs[9],\\n            timestamp: inputs[10]\\n        });\\n\\n        return params;\\n    }\\n}\\n\",\"keccak256\":\"0x8dae9b46a52b5c654cd05aa11e446579ec902e4e41e3f11afab9603c7e72d173\",\"license\":\"GPL-3.0\"},\"contracts/validators/CredentialAtomicQueryValidator.sol\":{\"content\":\"// SPDX-License-Identifier: GPL-3.0\\npragma solidity ^0.8.16;\\n\\nimport {OwnableUpgradeable} from \\\"@openzeppelin/contracts-upgradeable/access/OwnableUpgradeable.sol\\\";\\nimport {GenesisUtils} from \\\"@iden3/contracts/lib/GenesisUtils.sol\\\";\\nimport {ICircuitValidator} from \\\"@iden3/contracts/interfaces/ICircuitValidator.sol\\\";\\nimport {IVerifier} from \\\"@iden3/contracts/interfaces/IVerifier.sol\\\";\\nimport {IState} from \\\"@iden3/contracts/interfaces/IState.sol\\\";\\nimport {PoseidonFacade} from \\\"@iden3/contracts/lib/Poseidon.sol\\\";\\n\\nabstract contract CredentialAtomicQueryValidator is\\n    OwnableUpgradeable,\\n    ICircuitValidator\\n{\\n    struct CredentialAtomicQuery {\\n        uint256 schema;\\n        uint256 claimPathKey;\\n        uint256 operator;\\n        uint256 slotIndex;\\n        uint256[] value;\\n        uint256 queryHash;\\n        uint256[] allowedIssuers;\\n        string[] circuitIds;\\n        bool skipClaimRevocationCheck;\\n        // 0 for inclusion in merklized credentials, 1 for non-inclusion and for non-merklized credentials\\n        uint256 claimPathNotExists;\\n    }\\n\\n    struct CommonPubSignals {\\n        uint256 merklized;\\n        uint256 userID;\\n        uint256 issuerState;\\n        uint256 circuitQueryHash;\\n        uint256 requestID;\\n        uint256 challenge;\\n        uint256 gistRoot;\\n        uint256 issuerID;\\n        uint256 isRevocationChecked;\\n        uint256 issuerClaimNonRevState;\\n        uint256 timestamp;\\n    }\\n\\n    // This empty reserved space is put in place to allow future versions\\n    // of the CredentialAtomicQuerySigValidator contract to inherit from other contracts without a risk of\\n    // breaking the storage layout. This is necessary because the parent contracts in the\\n    // future may introduce some storage variables, which are placed before the CredentialAtomicQuerySigValidator\\n    // contract's storage variables.\\n    // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n    // slither-disable-next-line shadowing-state\\n    // slither-disable-next-line unused-state\\n    uint256[500] private __gap_before_base;\\n\\n    mapping(string => IVerifier) internal _circuitIdToVerifier;\\n    string[] internal _supportedCircuitIds;\\n\\n    IState public state;\\n\\n    uint256 public revocationStateExpirationTimeout;\\n    uint256 public proofExpirationTimeout;\\n    uint256 public gistRootExpirationTimeout;\\n\\n    mapping(string => uint256) internal _inputNameToIndex;\\n\\n    // This empty reserved space is put in place to allow future versions\\n    // of this contract to add new variables without shifting down\\n    // storage of child contracts that use this contract as a base\\n    // (see https://docs.openzeppelin.com/upgrades-plugins/1.x/writing-upgradeable#storage-gaps)\\n    uint256[43] __gap_after_base;\\n\\n    function initialize(\\n        address _verifierContractAddr,\\n        address _stateContractAddr\\n    ) public virtual onlyInitializing {\\n        revocationStateExpirationTimeout = 1 hours;\\n        proofExpirationTimeout = 1 hours;\\n        gistRootExpirationTimeout = 1 hours;\\n        state = IState(_stateContractAddr);\\n        __Ownable_init();\\n    }\\n\\n    function parseCommonPubSignals(\\n        uint256[] calldata inputs\\n    ) public pure virtual returns (CommonPubSignals memory);\\n\\n    function setRevocationStateExpirationTimeout(\\n        uint256 expirationTimeout\\n    ) public virtual onlyOwner {\\n        revocationStateExpirationTimeout = expirationTimeout;\\n    }\\n\\n    function setProofExpirationTimeout(\\n        uint256 expirationTimeout\\n    ) public virtual onlyOwner {\\n        proofExpirationTimeout = expirationTimeout;\\n    }\\n\\n    function setGISTRootExpirationTimeout(\\n        uint256 expirationTimeout\\n    ) public virtual onlyOwner {\\n        gistRootExpirationTimeout = expirationTimeout;\\n    }\\n\\n    function setStateAddress(\\n        address stateContractAddr\\n    ) public virtual onlyOwner {\\n        state = IState(stateContractAddr);\\n    }\\n\\n    function getSupportedCircuitIds()\\n        external\\n        view\\n        virtual\\n        returns (string[] memory ids)\\n    {\\n        return _supportedCircuitIds;\\n    }\\n\\n    function inputIndexOf(\\n        string memory name\\n    ) external view virtual returns (uint256) {\\n        uint256 index = _inputNameToIndex[name];\\n        require(index != 0, \\\"Input name not found\\\");\\n        return --index; // we save 1-based index, but return 0-based\\n    }\\n\\n    function _verify(\\n        uint256[] calldata inputs,\\n        uint256[2] calldata a,\\n        uint256[2][2] calldata b,\\n        uint256[2] calldata c,\\n        bytes calldata data\\n    ) internal view virtual {\\n        CredentialAtomicQuery memory credAtomicQuery = abi.decode(\\n            data,\\n            (CredentialAtomicQuery)\\n        );\\n        IVerifier verifier = _circuitIdToVerifier[\\n            credAtomicQuery.circuitIds[0]\\n        ];\\n\\n        require(\\n            credAtomicQuery.circuitIds.length == 1 &&\\n                verifier != IVerifier(address(0)),\\n            \\\"Invalid circuit ID\\\"\\n        );\\n\\n        // verify that zkp is valid\\n        require(verifier.verify(a, b, c, inputs), \\\"Proof is not valid\\\");\\n\\n        CommonPubSignals memory signals = parseCommonPubSignals(inputs);\\n\\n        // check circuitQueryHash\\n        require(\\n            signals.circuitQueryHash == credAtomicQuery.queryHash,\\n            \\\"Query hash does not match the requested one\\\"\\n        );\\n\\n        // TODO: add support for query to specific userID and then verifying it\\n\\n        _checkMerklized(signals.merklized, credAtomicQuery.claimPathKey);\\n        // TODO: fix this ('Root does not exist')\\n        //_checkGistRoot(signals.gistRoot);\\n        _checkAllowedIssuers(signals.issuerID, credAtomicQuery.allowedIssuers);\\n        _checkClaimIssuanceState(signals.issuerID, signals.issuerState);\\n        // TODO: handle revocation state\\n        //_checkClaimNonRevState(signals.issuerID, signals.issuerClaimNonRevState);\\n        // TODO: handle proof expiration\\n        // _checkProofExpiration(signals.timestamp);\\n        // TODO: handle revocation state\\n        // _checkIsRevocationChecked(\\n        //   signals.isRevocationChecked,\\n        //   credAtomicQuery.skipClaimRevocationCheck\\n        // );\\n    }\\n\\n    function _checkGistRoot(uint256 gistRoot) internal view {\\n        IState.GistRootInfo memory rootInfo = state.getGISTRootInfo(gistRoot);\\n        require(\\n            rootInfo.root == gistRoot,\\n            \\\"Gist root state isn't in state contract\\\"\\n        );\\n        if (\\n            rootInfo.replacedAtTimestamp != 0 &&\\n            block.timestamp - rootInfo.replacedAtTimestamp >\\n            gistRootExpirationTimeout\\n        ) {\\n            revert(\\\"Gist root is expired\\\");\\n        }\\n    }\\n\\n    function _checkClaimIssuanceState(\\n        uint256 _id,\\n        uint256 _state\\n    ) internal view {\\n        bool isStateGenesis = GenesisUtils.isGenesisState(_id, _state);\\n\\n        if (!isStateGenesis) {\\n            IState.StateInfo memory stateInfo = state.getStateInfoByIdAndState(\\n                _id,\\n                _state\\n            );\\n            require(\\n                _id == stateInfo.id,\\n                \\\"State doesn't exist in state contract\\\"\\n            );\\n        }\\n    }\\n\\n    function _checkClaimNonRevState(\\n        uint256 _id,\\n        uint256 _claimNonRevState\\n    ) internal view {\\n        // check if identity transited any state in contract\\n        bool idExists = state.idExists(_id);\\n\\n        // if identity didn't transit any state it must be genesis\\n        if (!idExists) {\\n            require(\\n                GenesisUtils.isGenesisState(_id, _claimNonRevState),\\n                \\\"Issuer revocation state doesn't exist in state contract and is not genesis\\\"\\n            );\\n        } else {\\n            IState.StateInfo memory claimNonRevStateInfo = state\\n                .getStateInfoById(_id);\\n            // The non-empty state is returned, and it's not equal to the state that the user has provided.\\n            if (claimNonRevStateInfo.state != _claimNonRevState) {\\n                // Get the time of the latest state and compare it to the transition time of state provided by the user.\\n                IState.StateInfo memory claimNonRevLatestStateInfo = state\\n                    .getStateInfoByIdAndState(_id, _claimNonRevState);\\n\\n                if (\\n                    claimNonRevLatestStateInfo.id == 0 ||\\n                    claimNonRevLatestStateInfo.id != _id\\n                ) {\\n                    revert(\\\"State in transition info contains invalid id\\\");\\n                }\\n\\n                if (claimNonRevLatestStateInfo.replacedAtTimestamp == 0) {\\n                    revert(\\n                        \\\"Non-Latest state doesn't contain replacement information\\\"\\n                    );\\n                }\\n\\n                if (\\n                    block.timestamp -\\n                        claimNonRevLatestStateInfo.replacedAtTimestamp >\\n                    revocationStateExpirationTimeout\\n                ) {\\n                    revert(\\\"Non-Revocation state of Issuer expired\\\");\\n                }\\n            }\\n        }\\n    }\\n\\n    function _checkProofExpiration(\\n        uint256 _proofGenerationTimestamp\\n    ) internal view {\\n        if (_proofGenerationTimestamp > block.timestamp) {\\n            revert(\\\"Proof generated in the future is not valid\\\");\\n        }\\n        if (\\n            block.timestamp - _proofGenerationTimestamp > proofExpirationTimeout\\n        ) {\\n            revert(\\\"Generated proof is outdated\\\");\\n        }\\n    }\\n\\n    function _checkAllowedIssuers(\\n        uint256 issuerId,\\n        uint256[] memory allowedIssuers\\n    ) internal pure {\\n        // empty array is 'allow all' equivalent - ['*']\\n        if (allowedIssuers.length == 0) {\\n            return;\\n        }\\n\\n        for (uint i = 0; i < allowedIssuers.length; i++) {\\n            if (issuerId == allowedIssuers[i]) {\\n                return;\\n            }\\n        }\\n\\n        revert(\\\"Issuer is not on the Allowed Issuers list\\\");\\n    }\\n\\n    function _checkMerklized(\\n        uint256 merklized,\\n        uint256 queryClaimPathKey\\n    ) internal pure {\\n        uint256 shouldBeMerklized = queryClaimPathKey != 0 ? 1 : 0;\\n        require(\\n            merklized == shouldBeMerklized,\\n            \\\"Merklized value is not correct\\\"\\n        );\\n    }\\n\\n    function _checkIsRevocationChecked(\\n        uint256 isRevocationChecked,\\n        bool skipClaimRevocationCheck\\n    ) internal pure {\\n        uint256 expectedIsRevocationChecked = 1;\\n        if (skipClaimRevocationCheck) {\\n            expectedIsRevocationChecked = 0;\\n        }\\n        require(\\n            isRevocationChecked == expectedIsRevocationChecked,\\n            \\\"Revocation check should match the query\\\"\\n        );\\n    }\\n\\n    function _setInputToIndex(string memory inputName, uint256 index) internal {\\n        _inputNameToIndex[inputName] = ++index; // increment index to avoid 0\\n    }\\n}\\n\",\"keccak256\":\"0xba38325f2e687353dcd7c583707967a7aff73dd213125cdea2cd778a45e04cd2\",\"license\":\"GPL-3.0\"},\"solidity-bytes-utils/contracts/BytesLib.sol\":{\"content\":\"// SPDX-License-Identifier: Unlicense\\n/*\\n * @title Solidity Bytes Arrays Utils\\n * @author Gon\\u00e7alo S\\u00e1 <goncalo.sa@consensys.net>\\n *\\n * @dev Bytes tightly packed arrays utility library for ethereum contracts written in Solidity.\\n *      The library lets you concatenate, slice and type cast bytes arrays both in memory and storage.\\n */\\npragma solidity >=0.8.0 <0.9.0;\\n\\n\\nlibrary BytesLib {\\n    function concat(\\n        bytes memory _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            // Get a location of some free memory and store it in tempBytes as\\n            // Solidity does for memory variables.\\n            tempBytes := mload(0x40)\\n\\n            // Store the length of the first bytes array at the beginning of\\n            // the memory for tempBytes.\\n            let length := mload(_preBytes)\\n            mstore(tempBytes, length)\\n\\n            // Maintain a memory counter for the current write location in the\\n            // temp bytes array by adding the 32 bytes for the array length to\\n            // the starting location.\\n            let mc := add(tempBytes, 0x20)\\n            // Stop copying when the memory counter reaches the length of the\\n            // first bytes array.\\n            let end := add(mc, length)\\n\\n            for {\\n                // Initialize a copy counter to the start of the _preBytes data,\\n                // 32 bytes into its memory.\\n                let cc := add(_preBytes, 0x20)\\n            } lt(mc, end) {\\n                // Increase both counters by 32 bytes each iteration.\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                // Write the _preBytes data into the tempBytes memory 32 bytes\\n                // at a time.\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Add the length of _postBytes to the current length of tempBytes\\n            // and store it as the new length in the first 32 bytes of the\\n            // tempBytes memory.\\n            length := mload(_postBytes)\\n            mstore(tempBytes, add(length, mload(tempBytes)))\\n\\n            // Move the memory counter back from a multiple of 0x20 to the\\n            // actual end of the _preBytes data.\\n            mc := end\\n            // Stop copying when the memory counter reaches the new combined\\n            // length of the arrays.\\n            end := add(mc, length)\\n\\n            for {\\n                let cc := add(_postBytes, 0x20)\\n            } lt(mc, end) {\\n                mc := add(mc, 0x20)\\n                cc := add(cc, 0x20)\\n            } {\\n                mstore(mc, mload(cc))\\n            }\\n\\n            // Update the free-memory pointer by padding our last write location\\n            // to 32 bytes: add 31 bytes to the end of tempBytes to move to the\\n            // next 32 byte block, then round down to the nearest multiple of\\n            // 32. If the sum of the length of the two arrays is zero then add\\n            // one before rounding down to leave a blank 32 bytes (the length block with 0).\\n            mstore(0x40, and(\\n              add(add(end, iszero(add(length, mload(_preBytes)))), 31),\\n              not(31) // Round down to the nearest 32 bytes.\\n            ))\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function concatStorage(bytes storage _preBytes, bytes memory _postBytes) internal {\\n        assembly {\\n            // Read the first 32 bytes of _preBytes storage, which is the length\\n            // of the array. (We don't need to use the offset into the slot\\n            // because arrays use the entire slot.)\\n            let fslot := sload(_preBytes.slot)\\n            // Arrays of 31 bytes or less have an even value in their slot,\\n            // while longer arrays have an odd value. The actual length is\\n            // the slot divided by two for odd values, and the lowest order\\n            // byte divided by two for even values.\\n            // If the slot is even, bitwise and the slot with 255 and divide by\\n            // two to get the length. If the slot is odd, bitwise and the slot\\n            // with -1 and divide by two.\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n            let newlength := add(slength, mlength)\\n            // slength can contain both the length and contents of the array\\n            // if length < 32 bytes so let's prepare for that\\n            // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n            switch add(lt(slength, 32), lt(newlength, 32))\\n            case 2 {\\n                // Since the new array still fits in the slot, we just need to\\n                // update the contents of the slot.\\n                // uint256(bytes_storage) = uint256(bytes_storage) + uint256(bytes_memory) + new_length\\n                sstore(\\n                    _preBytes.slot,\\n                    // all the modifications to the slot are inside this\\n                    // next block\\n                    add(\\n                        // we can just add to the slot contents because the\\n                        // bytes we want to change are the LSBs\\n                        fslot,\\n                        add(\\n                            mul(\\n                                div(\\n                                    // load the bytes from memory\\n                                    mload(add(_postBytes, 0x20)),\\n                                    // zero all bytes to the right\\n                                    exp(0x100, sub(32, mlength))\\n                                ),\\n                                // and now shift left the number of bytes to\\n                                // leave space for the length in the slot\\n                                exp(0x100, sub(32, newlength))\\n                            ),\\n                            // increase length by the double of the memory\\n                            // bytes length\\n                            mul(mlength, 2)\\n                        )\\n                    )\\n                )\\n            }\\n            case 1 {\\n                // The stored value fits in the slot, but the combined value\\n                // will exceed it.\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // The contents of the _postBytes array start 32 bytes into\\n                // the structure. Our first read should obtain the `submod`\\n                // bytes that can fit into the unused space in the last word\\n                // of the stored array. To get this, we read 32 bytes starting\\n                // from `submod`, so the data we read overlaps with the array\\n                // contents by `submod` bytes. Masking the lowest-order\\n                // `submod` bytes allows us to add that value directly to the\\n                // stored value.\\n\\n                let submod := sub(32, slength)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(\\n                    sc,\\n                    add(\\n                        and(\\n                            fslot,\\n                            0xffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff00\\n                        ),\\n                        and(mload(mc), mask)\\n                    )\\n                )\\n\\n                for {\\n                    mc := add(mc, 0x20)\\n                    sc := add(sc, 1)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n            default {\\n                // get the keccak hash to get the contents of the array\\n                mstore(0x0, _preBytes.slot)\\n                // Start copying to the last used word of the stored array.\\n                let sc := add(keccak256(0x0, 0x20), div(slength, 32))\\n\\n                // save new length\\n                sstore(_preBytes.slot, add(mul(newlength, 2), 1))\\n\\n                // Copy over the first `submod` bytes of the new data as in\\n                // case 1 above.\\n                let slengthmod := mod(slength, 32)\\n                let mlengthmod := mod(mlength, 32)\\n                let submod := sub(32, slengthmod)\\n                let mc := add(_postBytes, submod)\\n                let end := add(_postBytes, mlength)\\n                let mask := sub(exp(0x100, submod), 1)\\n\\n                sstore(sc, add(sload(sc), and(mload(mc), mask)))\\n\\n                for {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } lt(mc, end) {\\n                    sc := add(sc, 1)\\n                    mc := add(mc, 0x20)\\n                } {\\n                    sstore(sc, mload(mc))\\n                }\\n\\n                mask := exp(0x100, sub(mc, end))\\n\\n                sstore(sc, mul(div(mload(mc), mask), mask))\\n            }\\n        }\\n    }\\n\\n    function slice(\\n        bytes memory _bytes,\\n        uint256 _start,\\n        uint256 _length\\n    )\\n        internal\\n        pure\\n        returns (bytes memory)\\n    {\\n        require(_length + 31 >= _length, \\\"slice_overflow\\\");\\n        require(_bytes.length >= _start + _length, \\\"slice_outOfBounds\\\");\\n\\n        bytes memory tempBytes;\\n\\n        assembly {\\n            switch iszero(_length)\\n            case 0 {\\n                // Get a location of some free memory and store it in tempBytes as\\n                // Solidity does for memory variables.\\n                tempBytes := mload(0x40)\\n\\n                // The first word of the slice result is potentially a partial\\n                // word read from the original array. To read it, we calculate\\n                // the length of that partial word and start copying that many\\n                // bytes into the array. The first word we copy will start with\\n                // data we don't care about, but the last `lengthmod` bytes will\\n                // land at the beginning of the contents of the new array. When\\n                // we're done copying, we overwrite the full first word with\\n                // the actual length of the slice.\\n                let lengthmod := and(_length, 31)\\n\\n                // The multiplication in the next line is necessary\\n                // because when slicing multiples of 32 bytes (lengthmod == 0)\\n                // the following copy loop was copying the origin's length\\n                // and then ending prematurely not copying everything it should.\\n                let mc := add(add(tempBytes, lengthmod), mul(0x20, iszero(lengthmod)))\\n                let end := add(mc, _length)\\n\\n                for {\\n                    // The multiplication in the next line has the same exact purpose\\n                    // as the one above.\\n                    let cc := add(add(add(_bytes, lengthmod), mul(0x20, iszero(lengthmod))), _start)\\n                } lt(mc, end) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    mstore(mc, mload(cc))\\n                }\\n\\n                mstore(tempBytes, _length)\\n\\n                //update free-memory pointer\\n                //allocating the array padded to 32 bytes like the compiler does now\\n                mstore(0x40, and(add(mc, 31), not(31)))\\n            }\\n            //if we want a zero-length slice let's just return a zero-length array\\n            default {\\n                tempBytes := mload(0x40)\\n                //zero out the 32 bytes slice we are about to return\\n                //we need to do it because Solidity does not garbage collect\\n                mstore(tempBytes, 0)\\n\\n                mstore(0x40, add(tempBytes, 0x20))\\n            }\\n        }\\n\\n        return tempBytes;\\n    }\\n\\n    function toAddress(bytes memory _bytes, uint256 _start) internal pure returns (address) {\\n        require(_bytes.length >= _start + 20, \\\"toAddress_outOfBounds\\\");\\n        address tempAddress;\\n\\n        assembly {\\n            tempAddress := div(mload(add(add(_bytes, 0x20), _start)), 0x1000000000000000000000000)\\n        }\\n\\n        return tempAddress;\\n    }\\n\\n    function toUint8(bytes memory _bytes, uint256 _start) internal pure returns (uint8) {\\n        require(_bytes.length >= _start + 1 , \\\"toUint8_outOfBounds\\\");\\n        uint8 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x1), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint16(bytes memory _bytes, uint256 _start) internal pure returns (uint16) {\\n        require(_bytes.length >= _start + 2, \\\"toUint16_outOfBounds\\\");\\n        uint16 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x2), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint32(bytes memory _bytes, uint256 _start) internal pure returns (uint32) {\\n        require(_bytes.length >= _start + 4, \\\"toUint32_outOfBounds\\\");\\n        uint32 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x4), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint64(bytes memory _bytes, uint256 _start) internal pure returns (uint64) {\\n        require(_bytes.length >= _start + 8, \\\"toUint64_outOfBounds\\\");\\n        uint64 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x8), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint96(bytes memory _bytes, uint256 _start) internal pure returns (uint96) {\\n        require(_bytes.length >= _start + 12, \\\"toUint96_outOfBounds\\\");\\n        uint96 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0xc), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint128(bytes memory _bytes, uint256 _start) internal pure returns (uint128) {\\n        require(_bytes.length >= _start + 16, \\\"toUint128_outOfBounds\\\");\\n        uint128 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x10), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toUint256(bytes memory _bytes, uint256 _start) internal pure returns (uint256) {\\n        require(_bytes.length >= _start + 32, \\\"toUint256_outOfBounds\\\");\\n        uint256 tempUint;\\n\\n        assembly {\\n            tempUint := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempUint;\\n    }\\n\\n    function toBytes32(bytes memory _bytes, uint256 _start) internal pure returns (bytes32) {\\n        require(_bytes.length >= _start + 32, \\\"toBytes32_outOfBounds\\\");\\n        bytes32 tempBytes32;\\n\\n        assembly {\\n            tempBytes32 := mload(add(add(_bytes, 0x20), _start))\\n        }\\n\\n        return tempBytes32;\\n    }\\n\\n    function equal(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let mc := add(_preBytes, 0x20)\\n                let end := add(mc, length)\\n\\n                for {\\n                    let cc := add(_postBytes, 0x20)\\n                // the next line is the loop condition:\\n                // while(uint256(mc < end) + cb == 2)\\n                } eq(add(lt(mc, end), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equal_nonAligned(bytes memory _preBytes, bytes memory _postBytes) internal pure returns (bool) {\\n        bool success = true;\\n\\n        assembly {\\n            let length := mload(_preBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(length, mload(_postBytes))\\n            case 1 {\\n                // cb is a circuit breaker in the for loop since there's\\n                //  no said feature for inline assembly loops\\n                // cb = 1 - don't breaker\\n                // cb = 0 - break\\n                let cb := 1\\n\\n                let endMinusWord := add(_preBytes, length)\\n                let mc := add(_preBytes, 0x20)\\n                let cc := add(_postBytes, 0x20)\\n\\n                for {\\n                // the next line is the loop condition:\\n                // while(uint256(mc < endWord) + cb == 2)\\n                } eq(add(lt(mc, endMinusWord), cb), 2) {\\n                    mc := add(mc, 0x20)\\n                    cc := add(cc, 0x20)\\n                } {\\n                    // if any of these checks fails then arrays are not equal\\n                    if iszero(eq(mload(mc), mload(cc))) {\\n                        // unsuccess:\\n                        success := 0\\n                        cb := 0\\n                    }\\n                }\\n\\n                // Only if still successful\\n                // For <1 word tail bytes\\n                if gt(success, 0) {\\n                    // Get the remainder of length/32\\n                    // length % 32 = AND(length, 32 - 1)\\n                    let numTailBytes := and(length, 0x1f)\\n                    let mcRem := mload(mc)\\n                    let ccRem := mload(cc)\\n                    for {\\n                        let i := 0\\n                    // the next line is the loop condition:\\n                    // while(uint256(i < numTailBytes) + cb == 2)\\n                    } eq(add(lt(i, numTailBytes), cb), 2) {\\n                        i := add(i, 1)\\n                    } {\\n                        if iszero(eq(byte(i, mcRem), byte(i, ccRem))) {\\n                            // unsuccess:\\n                            success := 0\\n                            cb := 0\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n\\n    function equalStorage(\\n        bytes storage _preBytes,\\n        bytes memory _postBytes\\n    )\\n        internal\\n        view\\n        returns (bool)\\n    {\\n        bool success = true;\\n\\n        assembly {\\n            // we know _preBytes_offset is 0\\n            let fslot := sload(_preBytes.slot)\\n            // Decode the length of the stored array like in concatStorage().\\n            let slength := div(and(fslot, sub(mul(0x100, iszero(and(fslot, 1))), 1)), 2)\\n            let mlength := mload(_postBytes)\\n\\n            // if lengths don't match the arrays are not equal\\n            switch eq(slength, mlength)\\n            case 1 {\\n                // slength can contain both the length and contents of the array\\n                // if length < 32 bytes so let's prepare for that\\n                // v. http://solidity.readthedocs.io/en/latest/miscellaneous.html#layout-of-state-variables-in-storage\\n                if iszero(iszero(slength)) {\\n                    switch lt(slength, 32)\\n                    case 1 {\\n                        // blank the last byte which is the length\\n                        fslot := mul(div(fslot, 0x100), 0x100)\\n\\n                        if iszero(eq(fslot, mload(add(_postBytes, 0x20)))) {\\n                            // unsuccess:\\n                            success := 0\\n                        }\\n                    }\\n                    default {\\n                        // cb is a circuit breaker in the for loop since there's\\n                        //  no said feature for inline assembly loops\\n                        // cb = 1 - don't breaker\\n                        // cb = 0 - break\\n                        let cb := 1\\n\\n                        // get the keccak hash to get the contents of the array\\n                        mstore(0x0, _preBytes.slot)\\n                        let sc := keccak256(0x0, 0x20)\\n\\n                        let mc := add(_postBytes, 0x20)\\n                        let end := add(mc, mlength)\\n\\n                        // the next line is the loop condition:\\n                        // while(uint256(mc < end) + cb == 2)\\n                        for {} eq(add(lt(mc, end), cb), 2) {\\n                            sc := add(sc, 1)\\n                            mc := add(mc, 0x20)\\n                        } {\\n                            if iszero(eq(sload(sc), mload(mc))) {\\n                                // unsuccess:\\n                                success := 0\\n                                cb := 0\\n                            }\\n                        }\\n                    }\\n                }\\n            }\\n            default {\\n                // unsuccess:\\n                success := 0\\n            }\\n        }\\n\\n        return success;\\n    }\\n}\\n\",\"keccak256\":\"0xa5b10f04797d5a10a9ba07855108b6bd695940e6a3d128927b2f74a0d359868a\",\"license\":\"Unlicense\"}},\"version\":1}",
  "bytecode": "0x6080806040523461001657612055908161001c8239f35b600080fdfe60806040526004361015610013575b600080fd5b60003560e01c80631134b480146101675780631af6d99b1461015e5780631c4c7fd814610155578063485cc9551461014c57806348d36920146101435780635307e79f1461013a578063652377dc14610131578063715018a6146101285780638da5cb5b1461011f5780638eff038a146101165780639a8a5b171461010d578063b16a394f14610104578063c19d93fb146100fb578063cb5aa558146100f2578063f2fde38b146100e9578063fb5af2a2146100e05763ffa1ad74146100d857600080fd5b61000e6109cf565b5061000e6108be565b5061000e610786565b5061000e6106d8565b5061000e6106ad565b5061000e61061c565b5061000e6104d9565b5061000e6104b9565b5061000e61048f565b5061000e61042a565b5061000e610407565b5061000e61037b565b5061000e61030d565b5061000e61021a565b5061000e6101d6565b5061000e61018a565b503461000e57602036600319011261000e57610181610a16565b60043561025e55005b503461000e57600036600319011261000e57602061025d54604051908152f35b600435906001600160a01b038216820361000e57565b602435906001600160a01b038216820361000e57565b503461000e57602036600319011261000e576101f06101aa565b6101f8610a16565b61025b80546001600160a01b0319166001600160a01b03909216919091179055005b503461000e57604036600319011261000e576102346101aa565b61028061023f6101c0565b6000549261026460ff8560081c1615809581966102ff575b81156102df575b50610abe565b83610277600160ff196000541617600055565b6102c657610ff8565b610287575b005b61029761ff001960005416600055565b604051600181527f7f26b83ff96e1f2b6a682f133852f6798a09c465da95921460cefb384740249890602090a1005b6102da61010061ff00196000541617600055565b610ff8565b303b159150816102f1575b503861025e565b6001915060ff1614386102ea565b600160ff8216109150610257565b503461000e57602036600319011261000e57610327610a16565b60043561025d55005b9181601f8401121561000e578235916001600160401b03831161000e576020808501948460051b01011161000e57565b9060249160641161000e57565b9060e4916101241161000e57565b503461000e5761014036600319011261000e576001600160401b0360043581811161000e576103ae903690600401610330565b91906103b936610360565b3660e41161000e576103ca3661036d565b90610124359484861161000e573660238701121561000e57856004013594851161000e57366024868801011161000e576024610285960193611793565b503461000e57602036600319011261000e57610421610a16565b60043561025c55005b503461000e5760008060031936011261048c57610445610a16565b603380546001600160a01b031981169091556040519082906001600160a01b03167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e08284a3f35b80fd5b503461000e57600036600319011261000e576033546040516001600160a01b039091168152602090f35b503461000e57600036600319011261000e57602061025c54604051908152f35b503461000e57600036600319011261000e57602061025e54604051908152f35b50634e487b7160e01b600052604160045260246000fd5b604081019081106001600160401b0382111761052b57604052565b6105336104f9565b604052565b90601f801991011681019081106001600160401b0382111761052b57604052565b6040519061016082018281106001600160401b0382111761052b57604052565b6040519061014082018281106001600160401b0382111761052b57604052565b60405190602082018281106001600160401b0382111761052b57604052565b81601f8201121561000e578035906001600160401b03821161060f575b604051926105ed601f8401601f191660200185610538565b8284526020838301011161000e57816000926020809301838601378301015290565b6106176104f9565b6105d5565b503461000e57602036600319011261000e576004356001600160401b03811161000e576106506106559136906004016105b8565b610faa565b54801561067157604051600019919091018152602090f35b0390f35b60405162461bcd60e51b8152602060048201526014602482015273125b9c1d5d081b985b59481b9bdd08199bdd5b9960621b6044820152606490fd5b503461000e57600036600319011261000e5761025b546040516001600160a01b039091168152602090f35b503461000e57602036600319011261000e576004356001600160401b03811161000e5761071561070f610160923690600401610330565b9061127d565b60405190805182526020810151602083015260408101516040830152606081015160608301526080810151608083015260a081015160a083015260c081015160c083015260e081015160e0830152610100808201519083015261012080820151908301526101408091015190820152f35b503461000e57602036600319011261000e576107a06101aa565b6107a8610a16565b6001600160a01b038116156107c05761028590610a6e565b60405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b6064820152608490fd5b60005b8381106108275750506000910152565b8181015183820152602001610817565b9060209161085081518092818552858086019101610814565b601f01601f1916010190565b602080820190808352835180925260408301928160408460051b8301019501936000915b8483106108905750505050505090565b90919293949584806108ae600193603f198682030187528a51610837565b9801930193019194939290610880565b503461000e5760008060031936011261048c5761025a908154906108e18261140b565b916040916108f183519485610538565b8184529384527fce0236a5efe714299a42f6f2c9cfc717a528be41a4d75e4891e940c13ffa4685938060208086015b8483106109345785518061066d898261085c565b85518285928a549261094584610d08565b8082526001948086169081156109b3575060011461097b575b5061096d816001960382610538565b815201980192019196610920565b8c8952838920955088905b80821061099c575081018301945061096d61095e565b865483830186015295850195879490910190610986565b60ff19168584015250151560051b81018301945061096d61095e565b503461000e57600036600319011261000e5761066d6040516109f081610510565b6005815264312e302e3160d81b6020820152604051918291602083526020830190610837565b6033546001600160a01b03163303610a2a57565b606460405162461bcd60e51b815260206004820152602060248201527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e65726044820152fd5b6033549060018060a01b0380911691826bffffffffffffffffffffffff60a01b821617603355167f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e06000604051a3565b15610ac557565b60405162461bcd60e51b815260206004820152602e60248201527f496e697469616c697a61626c653a20636f6e747261637420697320616c72656160448201526d191e481a5b9a5d1a585b1a5e995960921b6064820152608490fd5b60405190610b2e82610510565b601082526f0c6d2e4c6ead2e8a2eacae4f290c2e6d60831b6020830152565b60405190610b5a82610510565b600f82526e69737375657241757468537461746560881b6020830152565b60405190610b8582610510565b60098252681c995c5d595cdd125160ba1b6020830152565b60405190610baa82610510565b60098252686368616c6c656e676560b81b6020830152565b60405190610bcf82610510565b600882526719da5cdd149bdbdd60c21b6020830152565b60405190610bf382610510565b60088252671a5cdcdd595c925160c21b6020830152565b60405190610c1782610510565b60138252721a5cd4995d9bd8d85d1a5bdb90da1958dad959606a1b6020830152565b60405190610c4682610510565b6016825275697373756572436c61696d4e6f6e526576537461746560501b6020830152565b60405190610c7882610510565b6009825268074696d657374616d760bc1b6020830152565b60405190606082018281106001600160401b03821117610ce4575b60405260218252603760f91b6040837f63726564656e7469616c41746f6d6963517565727953696756324f6e4368616960208201520152565b610cec6104f9565b610cab565b50634e487b7160e01b600052601160045260246000fd5b90600182811c92168015610d38575b6020831014610d2257565b634e487b7160e01b600052602260045260246000fd5b91607f1691610d17565b818110610d4d575050565b60008155600101610d42565b9190601f8111610d6857505050565b610d94926000526020600020906020601f840160051c83019310610d96575b601f0160051c0190610d42565b565b9091508190610d87565b91909182516001600160401b038111610e6f575b610dc881610dc28454610d08565b84610d59565b602080601f8311600114610e04575081929394600092610df9575b50508160011b916000199060031b1c1916179055565b015190503880610de3565b90601f19831695610e1a85600052602060002090565b926000905b888210610e5757505083600195969710610e3e575b505050811b019055565b015160001960f88460031b161c19169055388080610e34565b80600185968294968601518155019501930190610e1f565b610e776104f9565b610db4565b9061025a91825492600193848255808510610eea575b505061025a6000527fce0236a5efe714299a42f6f2c9cfc717a528be41a4d75e4891e940c13ffa4685906000905b848210610ece575050509050565b84602082610ede83945187610da0565b01930191019091610ec0565b60009182527fce0236a5efe714299a42f6f2c9cfc717a528be41a4d75e4891e940c13ffa46850190847fce0236a5efe714299a42f6f2c9cfc717a528be41a4d75e4891e940c13ffa46865b838110610f43575050610e92565b610f4d8154610d08565b80610f5c575b50018590610f35565b601f9083828211600114610f77575050508281555b38610f53565b610f9892610f8a85600052602060002090565b920160051c82019101610d42565b60008181526020812081835555610f71565b6020610fc3918160405193828580945193849201610814565b810161025f81520301902090565b6020610fea918160405193828580945193849201610814565b810161025981520301902090565b90611136610d9492600161102c60405161101181610510565b60098152681b595c9adb1a5e995960ba1b6020820152610faa565b5561105460405161103c81610510565b60068152651d5cd95c925160d21b6020820152611edf565b61106461105f610b21565b611eed565b61107461106f610b4d565b611ef8565b61108461107f610b78565b611f03565b61109461108f610b9d565b611f0e565b6110a461109f610bc2565b611f19565b6110b46110af610be6565b611f24565b6110c46110bf610c0a565b611f2f565b6110d46110cf610c39565b611f3a565b6110e46110df610c6b565b611f45565b6110fe6110ef610599565b6110f7610c90565b8152610e7c565b6001600160a01b0316611117611112610c90565b610fd1565b80546001600160a01b0319166001600160a01b03909216919091179055565b6113aa565b6040519061016082018281106001600160401b038211176111a0575b604052816101406000918281528260208201528260408201528260608201528260808201528260a08201528260c08201528260e082015282610100820152826101208201520152565b6111a86104f9565b611157565b50634e487b7160e01b600052603260045260246000fd5b90156111cd5790565b6111d56111ad565b90565b602091600110156111e7570190565b6111ef6111ad565b0190565b604091600210156111e7570190565b606091600310156111e7570190565b608091600410156111e7570190565b60a091600510156111e7570190565b60c091600610156111e7570190565b60e091600710156111e7570190565b61010091600810156111e7570190565b61012091600910156111e7570190565b61014091600a10156111e7570190565b9061128661113b565b5061129181836111c4565b359161129d82826111d8565b35916112a981836111f3565b356112b48284611202565b35906112c08385611211565b356112cb8486611220565b35906112d7858761122f565b35926112e3868861123e565b35946113056112f2888a61124d565b35976112fe818b61125d565b359961126d565b359861130f610559565b9a8b5260208b015260408a01526060890152608088015260a087015260c086015260e085015261010084015261012083015261014082015290565b1561135157565b60405162461bcd60e51b815260206004820152602b60248201527f496e697469616c697a61626c653a20636f6e7472616374206973206e6f74206960448201526a6e697469616c697a696e6760a81b6064820152608490fd5b6114029060ff60005460081c16906113c18261134a565b610e108061025c558061025d5561025e5561025b9060018060a01b03166bffffffffffffffffffffffff60a01b8254161790556113fd8161134a565b61134a565b610d9433610a6e565b6020906001600160401b038111611424575b60051b0190565b61142c6104f9565b61141d565b81601f8201121561000e578035916114488361140b565b926114566040519485610538565b808452602092838086019260051b82010192831161000e578301905b828210611480575050505090565b81358152908301908301611472565b9080601f8301121561000e578135906114a78261140b565b926114b56040519485610538565b828452602092838086019160051b8301019280841161000e57848301915b8483106114e35750505050505090565b82356001600160401b03811161000e578691611504848480948901016105b8565b8152019201916114d3565b8015150361000e57565b3590610d948261150f565b60208183031261000e5780356001600160401b039182821161000e5701906101408284031261000e57611555610579565b9282358452602083013560208501526040830135604085015260608301356060850152608083013582811161000e5781611590918501611431565b608085015260a083013560a085015260c083013582811161000e57816115b7918501611431565b60c085015260e083013591821161000e576115d391830161148f565b60e08301526101006115e6818301611519565b90830152610120809101359082015290565b6020908051156111e7570190565b602091815181101561161b575b60051b010190565b6116236111ad565b611613565b1561162f57565b60405162461bcd60e51b8152602060048201526012602482015271125b9d985b1a590818da5c98dd5a5d08125160721b6044820152606490fd5b9081602091031261000e57516111d58161150f565b929391604080928537606460008584015b84600283106116d1575050505060c0840137610120610100830181905282018190526001600160fb1b03811161000e5760051b90816101409384830137010190565b80828186600195370193019101909161168f565b506040513d6000823e3d90fd5b156116f957565b60405162461bcd60e51b8152602060048201526012602482015271141c9bdbd9881a5cc81b9bdd081d985b1a5960721b6044820152606490fd5b1561173a57565b60405162461bcd60e51b815260206004820152602b60248201527f5175657279206861736820646f6573206e6f74206d617463682074686520726560448201526a71756573746564206f6e6560a81b6064820152608490fd5b61183182602083611836966117b16040999a610d949c810190611524565b9960e08b019160016117dc6117cf6117c986516115f8565b51610fd1565b546001600160a01b031690565b93515114806118b4575b6117ef90611628565b61180e8b5196879586948594630984a41f60e21b86526004860161167e565b03916001600160a01b03165afa9081156118a7575b600091611879575b506116f2565b61127d565b9161184a606084015160a083015114611733565b61185a8351602083015190611e7b565b61186f60e084019160c0835191015190611de9565b5191015190611998565b61189a915060203d81116118a0575b6118928183610538565b810190611669565b3861182b565b503d611888565b6118af6116e5565b611823565b506001600160a01b03831615156117e6565b908160e091031261000e5760c06040519160e083018381106001600160401b03821117611931575b604052805183526020810151602084015260408101516040840152606081015160608401526080810151608084015260a081015160a0840152015160c082015290565b6119396104f9565b6118ee565b1561194557565b60405162461bcd60e51b815260206004820152602560248201527f537461746520646f65736e277420657869737420696e20737461746520636f6e6044820152641d1c9858dd60da1b6064820152608490fd5b6119db6119d5836119b06119ab85611cd6565b611cbd565b602081519101519061ffff60f01b918281169160028110611a70575b50509050611b26565b82141590565b6119e3575050565b61025b546040516329e4398960e11b8152600481018390526024810193909352610d94929060e090829060449082906001600160a01b03165afa908115611a63575b600091611a35575b50511461193e565b611a56915060e03d8111611a5c575b611a4e8183610538565b8101906118c6565b38611a2d565b503d611a44565b611a6b6116e5565b611a25565b8391925060020360031b1b16168038806119cc565b15611a8c57565b60405162461bcd60e51b815260206004820152602160248201527f436865636b73756d207265717569726573203239206c656e67746820617272616044820152607960f81b6064820152608490fd5b15611ae257565b606460405162461bcd60e51b815260206004820152602060248201527f69644279746573207265717569726573203331206c656e6774682061727261796044820152fd5b906119ab611b3391611cd6565b908151611b58601a198201828111611c3f575b611b51855191611fc9565b1115611fdf565b60405192601b84019101603684015b808310611c2c575050611c0c601f611bbd611bc286611bb1611bbd602098611c1898601b6111d59c5287199788910116928391826040528b830160029161ffff60f01b1681520190565b03868101835282610538565b611f50565b91611bd0601d845114611a85565b611bef611bdc84611c64565b60ff61ff008260081b169160081c161790565b60405194859188830160029161ffff60f01b9060f01b1681520190565b03908101845283610538565b611c25601f825114611adb565b0151611cd6565b9091825181526020809101920190611b67565b611c47610cf1565b611b46565b6001906000198114611c5c570190565b6111ef610cf1565b90600091611c75601d825114611a85565b6000925b8151841015611cb857611ca5906020858401015160f81c61ffff80921601908111611cab575b93611c4c565b92611c79565b611cb3610cf1565b611c9f565b925050565b9060405191611ccb83610510565b602083526020830152565b8060081c9060081b907eff000000ff000000ff000000ff000000ff000000ff000000ff000000ff00007fff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0000007dff000000ff000000ff000000ff000000ff000000ff000000ff000000ff0084167cff000000ff000000ff000000ff000000ff000000ff000000ff000000ff84161760101b931691161760101c177bffffffff00000000ffffffff00000000ffffffff00000000ffffffff7fffffffff00000000ffffffff00000000ffffffff00000000ffffffff000000008260201b169160201c161777ffffffffffffffff0000000000000000ffffffffffffffff80198260401b169160401c16178060801b9060801c1790565b815115611e775760005b8251811015611e2057611e068184611606565b518214611e1b57611e1690611c4c565b611df3565b505050565b60405162461bcd60e51b815260206004820152602960248201527f497373756572206973206e6f74206f6e2074686520416c6c6f776564204973736044820152681d595c9cc81b1a5cdd60ba1b6064820152608490fd5b5050565b9060009015611ed7575060ff60015b1603611e9257565b60405162461bcd60e51b815260206004820152601e60248201527f4d65726b6c697a65642076616c7565206973206e6f7420636f727265637400006044820152606490fd5b60ff90611e8a565b611eea600291610faa565b55565b611eea600391610faa565b611eea600491610faa565b611eea600591610faa565b611eea600691610faa565b611eea600791610faa565b611eea600891610faa565b611eea600991610faa565b611eea600a91610faa565b611eea600b91610faa565b6040519181518084526020808501918501928184019282808701915b858110611fb95750505080518093875182018852940193828086019201905b828110611faa575050505090603f91601f199351011501011660405290565b81518152908301908301611f8b565b8251815291810191849101611f6c565b90601b8201809211611fd757565b610d94610cf1565b15611fe657565b60405162461bcd60e51b8152602060048201526011602482015270736c6963655f6f75744f66426f756e647360781b6044820152606490fdfea2646970667358221220b27e795aef88a757703cf933be1e675fff9566136ec915bdb38ab1f9135cb70164736f6c63430008100033",
  "deployedBytecode": "",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby disabling any functionality that is only available to the owner."
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      }
    },
    "stateVariables": {
      "VERSION": {
        "details": "Version of contract"
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {},
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 1168,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_initialized",
        "offset": 0,
        "slot": "0",
        "type": "t_uint8"
      },
      {
        "astId": 1171,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_initializing",
        "offset": 1,
        "slot": "0",
        "type": "t_bool"
      },
      {
        "astId": 1710,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "1",
        "type": "t_array(t_uint256)50_storage"
      },
      {
        "astId": 1040,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_owner",
        "offset": 0,
        "slot": "51",
        "type": "t_address"
      },
      {
        "astId": 1160,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap",
        "offset": 0,
        "slot": "52",
        "type": "t_array(t_uint256)49_storage"
      },
      {
        "astId": 2166,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap_before_base",
        "offset": 0,
        "slot": "101",
        "type": "t_array(t_uint256)500_storage"
      },
      {
        "astId": 2171,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_circuitIdToVerifier",
        "offset": 0,
        "slot": "601",
        "type": "t_mapping(t_string_memory_ptr,t_contract(IVerifier)210)"
      },
      {
        "astId": 2174,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_supportedCircuitIds",
        "offset": 0,
        "slot": "602",
        "type": "t_array(t_string_storage)dyn_storage"
      },
      {
        "astId": 2177,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "state",
        "offset": 0,
        "slot": "603",
        "type": "t_contract(IState)185"
      },
      {
        "astId": 2179,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "revocationStateExpirationTimeout",
        "offset": 0,
        "slot": "604",
        "type": "t_uint256"
      },
      {
        "astId": 2181,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "proofExpirationTimeout",
        "offset": 0,
        "slot": "605",
        "type": "t_uint256"
      },
      {
        "astId": 2183,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "gistRootExpirationTimeout",
        "offset": 0,
        "slot": "606",
        "type": "t_uint256"
      },
      {
        "astId": 2187,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "_inputNameToIndex",
        "offset": 0,
        "slot": "607",
        "type": "t_mapping(t_string_memory_ptr,t_uint256)"
      },
      {
        "astId": 2191,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap_after_base",
        "offset": 0,
        "slot": "608",
        "type": "t_array(t_uint256)43_storage"
      },
      {
        "astId": 1923,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap_before",
        "offset": 0,
        "slot": "651",
        "type": "t_array(t_uint256)500_storage"
      },
      {
        "astId": 1927,
        "contract": "contracts/validators/CredentialAtomicQuerySigValidator.sol:CredentialAtomicQuerySigValidator",
        "label": "__gap_after",
        "offset": 0,
        "slot": "1151",
        "type": "t_array(t_uint256)50_storage"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_string_storage)dyn_storage": {
        "base": "t_string_storage",
        "encoding": "dynamic_array",
        "label": "string[]",
        "numberOfBytes": "32"
      },
      "t_array(t_uint256)43_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[43]",
        "numberOfBytes": "1376"
      },
      "t_array(t_uint256)49_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[49]",
        "numberOfBytes": "1568"
      },
      "t_array(t_uint256)500_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[500]",
        "numberOfBytes": "16000"
      },
      "t_array(t_uint256)50_storage": {
        "base": "t_uint256",
        "encoding": "inplace",
        "label": "uint256[50]",
        "numberOfBytes": "1600"
      },
      "t_bool": {
        "encoding": "inplace",
        "label": "bool",
        "numberOfBytes": "1"
      },
      "t_contract(IState)185": {
        "encoding": "inplace",
        "label": "contract IState",
        "numberOfBytes": "20"
      },
      "t_contract(IVerifier)210": {
        "encoding": "inplace",
        "label": "contract IVerifier",
        "numberOfBytes": "20"
      },
      "t_mapping(t_string_memory_ptr,t_contract(IVerifier)210)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => contract IVerifier)",
        "numberOfBytes": "32",
        "value": "t_contract(IVerifier)210"
      },
      "t_mapping(t_string_memory_ptr,t_uint256)": {
        "encoding": "mapping",
        "key": "t_string_memory_ptr",
        "label": "mapping(string => uint256)",
        "numberOfBytes": "32",
        "value": "t_uint256"
      },
      "t_string_memory_ptr": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_string_storage": {
        "encoding": "bytes",
        "label": "string",
        "numberOfBytes": "32"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      },
      "t_uint8": {
        "encoding": "inplace",
        "label": "uint8",
        "numberOfBytes": "1"
      }
    }
  }
}